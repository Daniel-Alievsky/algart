package net.algart.lib;

/**
 * <p>This interface indicates that the class is <i>immutable</i>.
 *
 * <p>More precisely, AlgART libraries consider that a class <b>C</b> is <i><b>immutable</b></i>
 * if and only it fulfils at least one</b> of the following 3 conditions.<ol>
 *
 * <li>Class <b>C</b> is one of well-known standard Java immutable classes,
 * such as primitive classes, number wrappers, String, java.awt.Color, etc.
 * (see {@link #STANDARD_JAVA_IMMUTABLE_CLASSES} constant).
 *
 * <li>Class <b>C</b> implements <code>Immutable</code> interface
 * and is located in {@link net.algart.lib} package, or it extends some
 * other class (its predecessor), which implements
 * <code>Immutable</code> interface and is located in {@link net.algart.lib}
 * package.
 *
 * <li>Class <b>C</b>, or some of its precesessors, implements
 * <code>Immutable</code> interface and is <b>friendly towards
 * {@link Immutable.FriendlyImmutableClassName} interface</b>
 * in terms of {@link FriendlyClassName} interface. In this case
 * it's supposed that class <b>C</b> has been designed accurately
 * according the requirements and recommendations listed below.
 * </ol>
 *
 * <h3><a name="development">How to develop immutable classes</a></h3>
 *
 * <p>Here are the requirements that must be met by all immutable classes
 * and the recommendations concerning designing immutable classes.
 *
 * <ul>
 * <li><b>First requirement.</b>If class <b>C</b> is is immutable and <b>c</b>
 * is an instance of <b>C</b> (<code><b>c</b>.getClass()==<b>C</b></code>)
 * </ul>
 *
 *
 * <p><b>Important note!</b> All classes that implement this
 * interface and can be extended <b>must guarantee</b> not only
 * their immutablility, but also <b>immutability of all their
 * inheritors!</b> In particular, all their methods that
 * can be overrided, including <code>toString</code>,
 * <code>hashCode</code>, <code>equals</code> and <code>clone</code>,
 * must be declared final. The only exception from this rule is
 * the set of standard Java classes (see the condigion 1) that
 * does not implement <code>Immutable</code> interface. (For example,
 * standard <code>java.math.BigInteger</code> class is immutable,
 * but its inheritors may be mutable.)
 *
 * @see Tools#isImmutable(Class)
 * @author  Daniel Alievsky
 * @version 1.0
 */

public interface Immutable { //extends TrueStatic {
// Extending TrueStatic simplifies implementation and use of immutable classes

  /**
   * This class contains tools needed to manipulate immutable classes
   */
  public static class Tools {


    /**
     * Checks whether the given <code>inheritorClass</code>, which extends
     * correct immutable class <code>immutableClass</code> (implementing
     * {@link Immutable} interface), can be mutable in regard to
     * the binary data saved in the stream while serialization, and throws
     * <code>IllegalAccessError</code> in this situation. Does nothing in
     * other case (all O'k).
     *
     * <p>More precisely, this method checks, does <code>inheritorClass</code>
     * or some of its predecessors, which differ from the base superclass
     * <code>immutableClass</code> (and its predecessors) - in other words,
     * one of classes in the hierarchy <i>between</i> <code>immutableClass</code>
     * and <code>inheritorClass</code> (including <code>inheritorClass</code>,
     * but excluding <code>immutableClass</code>) - declare private
     * <code>writeObject</code> method with the following signature:<pre>
     *     void writeObject(ObjectOutputStream stream)
     * </pre>
     * (regardless of the "throws" statement and the access modifiers).
     * If a class declaring such method is found, <code>IllegalAccessError</code>
     * is thrown with the message informing about possible violation of
     * immutability.
     *
     * <p>The described check allows to avoid a little violation of immutability
     * of the class, which is immutable and has only final methods (including
     * all standard <code>Object</code>'s methods), but is not
     * final and has protected or public constructor. The inheritors
     * of such class, of course, <i>can</i> have additional mutable fields,
     * but changing of these fields cannot be detected in terms of the
     * base immutable superclass. Cannot - but excepting the following cases.<ol>
     *
     * <li>Normal serialization procedure will write <i>different</i>
     * bytes in the stream if you will change mutable fields in the inheritor.
     * To avoid this problem, you should declare final protected
     * <code>writeReplace()</code> method in the base immutable superclass.
     * <code>writeReplace()</code> method may, as a possible solution, replace
     * the current instance by it's copy created by <code>super.clone()</code>
     * <i>while creating an instance in the constructor</i>. Such a call always
     * creates a <i>clear</i> copy of the inheritor instance, where all additional
     * fields added by the inheritance contain zero (uninitialized) values.
     *
     * <li>The inheritor can also declare <code>writeObject</code> private method
     * that will write any data to the output stream, for example, random
     * numbers. This situation can be checked and blocked by this method
     * <code>checkWhetherInheritorImplementsUnsafeSerialization</code>.
     * </ol>
     *
     * @param immutableClass  The basic immutable superclass
     * @param inheritorClass  Some inheritor of the basic superclass which must
     *    also be immutable (at least in terms of the basic superclass)
     * @throws IllegalAccessError       Thrown if possible violation of immutability
     *    (<code>writeObject</code> method) is found in the inheritor (or
     *    between the inheritor and the basic superclass in the hierarchy)
     * @throws NullPointerException     Thrown if one of the method arguments is null
     * @throws IllegalArgumentException Thrown if <code>inheritorClass</code> is not
     *    an inheritor of <code>immutableClass</code>
     */
    public static void checkWhetherInheritorImplementsUnsafeSerialization(Class immutableClass, Class inheritorClass) {
      if (immutableClass == null || inheritorClass == null) throw new NullPointerException("Null argument in Immutable.Tools.checkWhetherInheritorImplementsUnsafeSerialization method");
      if (!immutableClass.isAssignableFrom(inheritorClass)) throw new IllegalArgumentException("Illegal arguments in Immutable.Tools.checkWhetherInheritorImplementsUnsafeSerialization method: inheritorClass is not an inheritor of immutableClass");
      for (Class clazz = inheritorClass;
        clazz != null && clazz != immutableClass;
        clazz = clazz.getSuperclass()) {
        try {
          clazz.getDeclaredMethod("writeObject",new Class[] {java.io.ObjectOutputStream.class});
          throw new IllegalAccessError("Possible violation of immutability for \"" + inheritorClass + "\" in regard to serialized stream: its predecessor \"" + clazz.getName() + "\" declares writeObject method");
        } catch (NoSuchMethodException e) {
        }
      }
    }
  }
}