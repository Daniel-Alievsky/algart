package net.algart.math.patterns;

import java.util.*;
import net.algart.math.IPoint;
import net.algart.math.IRange;

/**
 * <p>The implementation of the simple pattern,
 * returned by {@link Patterns#newIPattern(Collection)} method.</p>
 *
 * <p>AlgART Laboratory 2007-2012</p>
 *
 * @author Daniel Alievsky
 * @version 1.2
 * @since JDK 1.5
 */
class SimpleIPattern extends AbstractIntegerPattern implements Pattern {
    private final Set<IPoint> roundedPoints;

    SimpleIPattern(Set<IPoint> roundedPoints) {
        super(getDimCountAndCheck(roundedPoints), false);
        this.roundedPoints = roundedPoints;
    }

    @Override
    public long pointCount() {
        return roundedPoints.size();
    }

    @Override
    public boolean contains(IPoint point) {
        if (point == null)
            throw new NullPointerException("Null point argument");
        if (point.coordCount() != dimCount())
            throw new IllegalArgumentException("The number of point coordinates " + point.coordCount()
                + " is not equal to the number of pattern coordinates " + dimCount());
        return roundedPoints.contains(point);
    }

    @Override
    public Set<IPoint> roundedPoints() {
        return Collections.unmodifiableSet(roundedPoints);
    }

    @Override
    public boolean isRectangular() {
        if (isRectangular == null) {
            // below is an attempt to quickly determine that this pattern is not rectangular (very probable situation),
            // by checking some 5 points at the left boundary along every coordinate
            for (int coordIndex = 0; coordIndex < dimCount; coordIndex++) {
                long[] shiftCoordinates = new long[dimCount()];
                shiftCoordinates[coordIndex] = -1;
                IPoint shift = IPoint.valueOf(shiftCoordinates);
                int checkCount = 0;
                long minCoord = Long.MAX_VALUE;
                for (IPoint p : roundedPoints) {
                    long coord = p.coord(coordIndex);
                    if (coord == Long.MIN_VALUE // avoiding overflow in the next check
                        || !roundedPoints.contains(p.add(shift))) {
                        // we are at the left boundary
                        if (checkCount == 0) {
                            minCoord = coord;
                        } else {
                            if (coord != minCoord)
                                return isRectangular = false;
                        }
                        checkCount++;
                        if (checkCount >= 5) // check only 10 points
                            break;
                    }
                }
            }
        }
        return super.isRectangular();
    }

    @Override
    public Pattern projectionAlongAxis(int coordIndex) {
        checkCoordIndex(coordIndex);
        assert dimCount > 0;
        if (dimCount == 1)
            throw new IllegalStateException("Cannot perform projection for 1-dimensional pattern");
        Set<IPoint> resultPoints = new HashSet<IPoint>(roundedPoints.size());
        for (IPoint p : roundedPoints) {
            resultPoints.add(p.projectionAlongAxis(coordIndex));
        }
        return new SimpleIPattern(resultPoints);
    }



    @Override
    public UniformGridPattern shift(IPoint shift) {
        if (shift == null)
            throw new NullPointerException("Null shift argument");
        if (shift.coordCount() != dimCount())
            throw new IllegalArgumentException("The number of shift coordinates " + shift.coordCount()
                + " is not equal to the number of pattern coordinates " + dimCount());
        Set<IPoint> resultPoints = new HashSet<IPoint>(roundedPoints.size());
        for (IPoint p : roundedPoints) {
            resultPoints.add(p.add(shift));
        }
        return new SimpleIPattern(resultPoints);
    }

    @Override
    public UniformGridPattern scale(double... multipliers) {
        if (multipliers == null)
            throw new NullPointerException("Null multipliers argument");
        if (multipliers.length != dimCount())
            throw new IllegalArgumentException("Illegal number of multipliers: "
                + multipliers.length + " instead of " + dimCount());
        Set<IPoint> resultPoints = new HashSet<IPoint>(roundedPoints.size());
        for (IPoint p : roundedPoints) {
            resultPoints.add(p.roundedScale(multipliers));
        }
        return new SimpleIPattern(resultPoints);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder(dimCount() + "D multipoint pattern containing "
            + roundedPoints.size() + " points");
        if (pointCount() <= 1024) {
            IRange[] ranges = roundedCoordRanges();
            sb.append(" inside ").append(ranges[0].size());
            for (int k = 1; k < ranges.length; k++) {
                sb.append("x").append(ranges[k].size());
            }
        }
        return sb.toString();
    }

    @Override
    public int hashCode() {
        return roundedPoints().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof SimpleIPattern || obj instanceof TwoPointsIPattern || obj instanceof OnePointIPattern))
            return false;
        if (obj == this)
            return true;
        return ((Pattern)obj).roundedPoints().equals(this.roundedPoints());
    }

    static int getDimCountAndCheck(Collection<IPoint> points) {
        if (points == null)
            throw new NullPointerException("Null points argument");
        int n = points.size();
        if (n == 0)
            throw new IllegalArgumentException("Empty points set");
        Iterator<IPoint> iterator = points.iterator();
        IPoint p = iterator.next();
        if (p == null)
            throw new NullPointerException("Null point is the collection");
        int result = p.coordCount();
        for (; iterator.hasNext(); ) {
            p = iterator.next();
            if (p == null)
                throw new NullPointerException("Null point is the collection");
            if (p.coordCount() != result)
                throw new IllegalArgumentException("Points dimensions mismatch: the first point has "
                    + result + " coordinates, but some of points has " + p.coordCount());
            for (int k = 0; k < result; k++) {
                long coord = p.coord(k);
                if (coord < -Long.MAX_VALUE / 2 || coord > Long.MAX_VALUE / 2)
                    throw new IllegalArgumentException("Some point coordinate is out of "
                        + "-Long.MAX_VALUE/2..Long.MAX_VALUE/2 range");
            }
        }
        return result;
    }
}
