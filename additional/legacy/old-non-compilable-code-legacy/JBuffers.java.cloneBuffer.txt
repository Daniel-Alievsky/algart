    /**
     * Returns a clone of the given buffer.
     *
     * <p>The returned clone contains all <tt>buffer.limit()</tt> elements;
     * its capacity is equal to its limit.
     *
     * <p>The clone is created by:<ul>
     * <li><tt>XxxBuffer.allocate(b.limit())</tt> call,
     * where XxxBuffer is a precise type of the passed <tt>buffer</tt>,
     * if <tt>isDirect()</tt> method returns <tt>false</tt> for the passed argument;</li>
     * <li><tt>ByteBuffer.allocateDirect(b.limit())</tt> call,
     * if the passed argument is <tt>ByteBuffer</tt> and
     * its <tt>isDirect()</tt> method returns <tt>true</tt>;</li>
     * <li><tt>ByteBuffer.allocateDirect(n * b.limit()).asXxxBuffer</tt> call,
     * where <tt>n</tt> is number of bytes in one buffer element,
     * if the passed argument is any other <tt>XxxBuffer</tt> and
     * its <tt>isDirect()</tt> method returns <tt>true</tt>.</li>
     * </ul>
     *
     * <p>This method does not modify <i>limit</i>, <i>position</i> and <i>mark</i> properties
     * of the passed buffer.
     *
     * @param buffer the source buffer.
     * @return       the clone.
     * @throws NullPointerException if the <tt>buffer</tt> argument is <tt>null</tt>.
     */
    public static Buffer cloneBuffer(Buffer buffer) {
        if (buffer == null)
            throw new NullPointerException("Null buffer argument in cloneBuffer method");
        if (buffer instanceof ByteBuffer) {
            ByteBuffer b = ((ByteBuffer)buffer).duplicate();
            ByteOrder o = ((ByteBuffer)buffer).order();
            b.position(0);
            ByteBuffer result = b.isDirect() ?
                ByteBuffer.allocateDirect(b.limit()).order(o) :
                ByteBuffer.allocate(b.limit());
            result.put(b);
            return result;
        } else
        //<<Repeat() char ==> short,,int,,long,,float,,double;;
        //           Char ==> Short,,Int,,Long,,Float,,Double;;
        //           2(\s*\*\s*b\.limit) ==> 2$1,,4$1,,8$1,,4$1,,8$1 >>
        if (buffer instanceof CharBuffer) {
            CharBuffer b = ((CharBuffer)buffer).duplicate();
            ByteOrder o = ((CharBuffer)buffer).order();
            b.position(0);
            CharBuffer result = b.isDirect() ?
                ByteBuffer.allocateDirect(2 * b.limit()).order(o).asCharBuffer() :
                CharBuffer.allocate(b.limit());
            result.put(b);
            return result;
        } else//<<Repeat.AutoGeneratedStart !! Generated by Repeater: DO NOT EDIT !! >>
        if (buffer instanceof ShortBuffer) {
            ShortBuffer b = ((ShortBuffer)buffer).duplicate();
            ByteOrder o = ((ShortBuffer)buffer).order();
            b.position(0);
            ShortBuffer result = b.isDirect() ?
                ByteBuffer.allocateDirect(2 * b.limit()).order(o).asShortBuffer() :
                ShortBuffer.allocate(b.limit());
            result.put(b);
            return result;
        } else
        if (buffer instanceof IntBuffer) {
            IntBuffer b = ((IntBuffer)buffer).duplicate();
            ByteOrder o = ((IntBuffer)buffer).order();
            b.position(0);
            IntBuffer result = b.isDirect() ?
                ByteBuffer.allocateDirect(4 * b.limit()).order(o).asIntBuffer() :
                IntBuffer.allocate(b.limit());
            result.put(b);
            return result;
        } else
        if (buffer instanceof LongBuffer) {
            LongBuffer b = ((LongBuffer)buffer).duplicate();
            ByteOrder o = ((LongBuffer)buffer).order();
            b.position(0);
            LongBuffer result = b.isDirect() ?
                ByteBuffer.allocateDirect(8 * b.limit()).order(o).asLongBuffer() :
                LongBuffer.allocate(b.limit());
            result.put(b);
            return result;
        } else
        if (buffer instanceof FloatBuffer) {
            FloatBuffer b = ((FloatBuffer)buffer).duplicate();
            ByteOrder o = ((FloatBuffer)buffer).order();
            b.position(0);
            FloatBuffer result = b.isDirect() ?
                ByteBuffer.allocateDirect(4 * b.limit()).order(o).asFloatBuffer() :
                FloatBuffer.allocate(b.limit());
            result.put(b);
            return result;
        } else
        if (buffer instanceof DoubleBuffer) {
            DoubleBuffer b = ((DoubleBuffer)buffer).duplicate();
            ByteOrder o = ((DoubleBuffer)buffer).order();
            b.position(0);
            DoubleBuffer result = b.isDirect() ?
                ByteBuffer.allocateDirect(8 * b.limit()).order(o).asDoubleBuffer() :
                DoubleBuffer.allocate(b.limit());
            result.put(b);
            return result;
        } else//<<Repeat.AutoGeneratedEnd>>
        {
            throw new IllegalArgumentException("Unknown type of passed buffer");
        }
    }

