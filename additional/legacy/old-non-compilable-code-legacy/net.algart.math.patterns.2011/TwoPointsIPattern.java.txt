package net.algart.math.patterns;

import java.util.*;
import net.algart.math.IPoint;

/**
 * <p>Special implementation of the simple pattern,
 * returned by {@link Patterns#newIPattern(Collection)} method, for a case of 2 different points.</p>
 *
 * <p>AlgART Laboratory 2007-2012</p>
 *
 * @author Daniel Alievsky
 * @version 1.2
 * @since JDK 1.5
 */
final class TwoPointsIPattern extends AbstractIntegerPattern implements Pattern {
    private final IPoint p1, p2;

    TwoPointsIPattern(IPoint p1, IPoint p2) {
        super(SimpleIPattern.getDimCountAndCheck(Arrays.asList(new IPoint[]{p1, p2})), true);
        if (p1.equals(p2))
            throw new IllegalArgumentException("Identical 2 points");
        this.p1 = p1;
        this.p2 = p2;
    }

    @Override
    public long pointCount() {
        return 2;
    }

    @Override
    public boolean contains(IPoint point) {
        if (point == null)
            throw new NullPointerException("Null point argument");
        if (point.coordCount() != dimCount())
            throw new IllegalArgumentException("The number of point coordinates " + point.coordCount()
                + " is not equal to the number of pattern coordinates " + dimCount());
        return point.equals(p1) || point.equals(p2);
    }

    @Override
    public Set<IPoint> roundedPoints() {
        Set<IPoint> resultPoints = new HashSet<IPoint>(2);
        resultPoints.add(p1);
        resultPoints.add(p2);
        return Collections.unmodifiableSet(resultPoints);
    }

    @Override
    public Pattern projectionAlongAxis(int coordIndex) {
        checkCoordIndex(coordIndex);
        assert dimCount > 0;
        if (dimCount == 1)
            throw new IllegalStateException("Cannot perform projection for 1-dimensional pattern");
        return new TwoPointsIPattern(p1.projectionAlongAxis(coordIndex), p2.projectionAlongAxis(coordIndex));
    }


    @Override
    public UniformGridPattern shift(IPoint shift) {
        if (shift == null)
            throw new NullPointerException("Null shift argument");
        if (shift.coordCount() != dimCount())
            throw new IllegalArgumentException("The number of shift coordinates " + shift.coordCount()
                + " is not equal to the number of pattern coordinates " + dimCount());
        if (shift.isOrigin()) {
            return this;
        }
        return new TwoPointsIPattern(p1.add(shift), p2.add(shift));
    }

    @Override
    public UniformGridPattern scale(double... multipliers) {
        if (multipliers == null)
            throw new NullPointerException("Null multipliers argument");
        if (multipliers.length != dimCount())
            throw new IllegalArgumentException("Illegal number of multipliers: "
                + multipliers.length + " instead of " + dimCount());
        return Patterns.newIPattern(p1.roundedScale(multipliers), p2.roundedScale(multipliers));
    }

    @Override
    public boolean hasMinkowskiDecomposition() {
        return false;
    }

    @Override
    public String toString() {
        return dimCount() + "D 2-point pattern (" + p1 + " and " + p2 + ")";
    }

    @Override
    public int hashCode() {
        return roundedPoints().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof SimpleIPattern || obj instanceof TwoPointsIPattern || obj instanceof OnePointIPattern))
            return false;
        if (obj == this)
            return true;
        return ((Pattern)obj).roundedPoints().equals(this.roundedPoints());
    }
}
