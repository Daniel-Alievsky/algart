package net.algart.lib;

/**
 * <p>Sizes (width and height) of a rectangular area:
 * an <i>immutable</i> equivalent of the standard <code>java.awt.Dimension</code> class.
 *
 * @author  Daniel Alievsky
 * @version 1.0
 * @since   JDK1.0
 */

public final class Sizes implements WithSizes, java.io.Serializable {
	/**
	 * The <i>width</i> stored in this instance (unmodifiable).
	 */
	public final int width;
	/**
	 * The <i>height</i> stored in this instance (unmodifiable).
	 */
	public final int height;

	/**
	 * Creates a new immutable instance of this class.
	 * @param width   The <i>width</i> stored in the new <code>Sizes</code>
	 * @param height  The <i>height</i> stored in the new <code>Sizes</code>
	 */
	public Sizes(int width, int height) {
		this.width = width;
		this.height = height;
	}

	/**
	 * Alternate way to access the <code>width</code> field.
	 * @return  The value of the <code>width</code> field.
	 * @see     #width
	 */
	public int width() {
		return width;
	}

	/**
	 * Alternate way to access the <code>height</code> field.
	 * @return  The value of the <code>height</code> field.
	 * @see     #height
	 */
	public int height() {
		return height;
	}

	/**
	 * Alternate way to access the <code>width</code> field.
	 * @return  The value of the <code>width</code> field.
	 * @see     #width
	 */
	public int sx() {
		return width;
	}

	/**
	 * Alternate way to access the <code>height</code> field.
	 * @return  The value of the <code>height</code> field.
	 * @see     #height
	 */
	public int sy() {
		return height;
	}

	/**
	 * The product of <code>width</code> and <code>height</code> (may be negative).
	 * @return  The <code>width * height</code> value.
	 * @see     #width
	 * @see     #height
	 */
	public int size() {
		return width * height;
	}

	/**
	 * The product of <code>width</code> and <code>height</code>
	 * with <code>long</code> precision (may be negative).
	 * Unlike {@link #size()} method, returns correct result even in a case
	 * when this product is too high to be represented by <code>int</code> value.
	 *
	 * @return  The <code>(long)width * (long)height</code> value.
	 * @see     #width
	 * @see     #height
	 * @see     #size()
	 */
	public long sizeLong() {
		return (long)width * (long)height;
	}

	/*Repeat(INCLUDE_FROM_FILE, Xy.java, toString-hashCode-equals)
		Xy ==> Sizes ;;
		\/\*toString\*\/.*?\/\*end\*\/  ==> width + "x" + height ;;
		\/\*hashCode\*\/.*?\/\*end\*\/  ==> width * 37 + height ;;
		\/\*equals\*\/.*?\/\*end\*\/    ==> o.width == width && o.height == height
	*/
  /**
   * Returns a string representation of this object.
   * This method is intended to be used only for debugging purposes,
   * and the content and format of the returned string may vary between
   * implementations.
   * The returned string may be empty but may not be <code>null</code>.
   *
   * @return  A string representation of this object
   */
  public String toString() {
    return width + "x" + height;
      // - "toString" and "end" marker commments are used by Repeater preprocessor
  }

  /**
   * Returns the hashcode for this object.
   * @return  A hash code for this object
   */
  public int hashCode() {
    return (width * 37 + height) ^ CLASS_HASH_CODE;
      // - "hashCode" and "end" marker commments are used by Repeater preprocessor
  }

  /**
   * Determines whether or not two objects are equal.
   * Two instances are equal if all arguments passed to their
   * constructors were equal.
   *
   * @param obj   An object to be compared with this instance
   * @return      <code>true</code> if the argument has the same type Sizes and is equal to this instance
   */
  public boolean equals(Object obj) {
    if (obj == null || obj.getClass() != getClass()) return false;
    Sizes o = (Sizes)obj;
    return o.width == width && o.height == height;
      // - "equals" and "end" marker commments are used by Repeater preprocessor
  }

  private static final int CLASS_HASH_CODE = Sizes.class.getName().hashCode();
  /*Repeat.IncludeEnd*/
}
