  /*Repeat()
    double          ==> int,, boolean,, int,, long,, double;;
    random\(\)      ==> random(int n),, randomBoolean(),, randomInt(),, randomLong(),, randomGaussian();;
    nextDouble\(\)  ==> nextInt(n),, nextBoolean(),, nextInt(),, nextLong(),, nextGaussian()
  */
  /**
   * Returns <code>rnd.nextDouble()</code>, where <code>rnd</code> is a
   * private static instance of <code>java.util.Random</code>. This instance
   * cannot be changed (as well as a random generator used by standard
   * <code>java.lang.Math.random()</code> method). But its start seed value
   * is initialized by {@link ImmSystemProperties#getClassLongProperty
   * ImmSystemProperties.getClassLongProperty(Math.class, ".RandomStartSeed")}
   * call if this system variable contains a valid long value. So, you can
   * guarantee the stability of all values returned by this method by
   * setting "net.algart.lib.Math.RandomStartSeed" variable to the fixed
   * value while calling "java" utility or by Java call
   * "<code>System.setProperty</code>" performed before the first access
   * to this <code>Math</code> class and to {@link ImmSystemProperties} class.
   *
   * @return the next result of <code>rnd.nextDouble()</code> call
   *    (<code>rnd</code> is a private static random generator)
   */
  public static double random() {
    return rnd.nextDouble();
  }/*Repeat.AutoGeneratedStart*/
                                                  /**
                                                   * Returns <code>rnd.nextInt(n)</code>, where <code>rnd</code> is a
                                                   * private static instance of <code>java.util.Random</code>. This instance
                                                   * cannot be changed (as well as a random generator used by standard
                                                   * <code>java.lang.Math.random(int n)</code> method). But its start seed value
                                                   * is initialized by {@link ImmSystemProperties#getClassLongProperty
                                                   * ImmSystemProperties.getClassLongProperty(Math.class, ".RandomStartSeed")}
                                                   * call if this system variable contains a valid long value. So, you can
                                                   * guarantee the stability of all values returned by this method by
                                                   * setting "net.algart.lib.Math.RandomStartSeed" variable to the fixed
                                                   * value while calling "java" utility or by Java call
                                                   * "<code>System.setProperty</code>" performed before the first access
                                                   * to this <code>Math</code> class and to {@link ImmSystemProperties} class.
                                                   *
                                                   * @return the next result of <code>rnd.nextInt(n)</code> call
                                                   *    (<code>rnd</code> is a private static random generator)
                                                   */
                                                  public static int random(int n) {
                                                    return rnd.nextInt(n);
                                                  }
                                                  /**
                                                   * Returns <code>rnd.nextBoolean()</code>, where <code>rnd</code> is a
                                                   * private static instance of <code>java.util.Random</code>. This instance
                                                   * cannot be changed (as well as a random generator used by standard
                                                   * <code>java.lang.Math.randomBoolean()</code> method). But its start seed value
                                                   * is initialized by {@link ImmSystemProperties#getClassLongProperty
                                                   * ImmSystemProperties.getClassLongProperty(Math.class, ".RandomStartSeed")}
                                                   * call if this system variable contains a valid long value. So, you can
                                                   * guarantee the stability of all values returned by this method by
                                                   * setting "net.algart.lib.Math.RandomStartSeed" variable to the fixed
                                                   * value while calling "java" utility or by Java call
                                                   * "<code>System.setProperty</code>" performed before the first access
                                                   * to this <code>Math</code> class and to {@link ImmSystemProperties} class.
                                                   *
                                                   * @return the next result of <code>rnd.nextBoolean()</code> call
                                                   *    (<code>rnd</code> is a private static random generator)
                                                   */
                                                  public static boolean randomBoolean() {
                                                    return rnd.nextBoolean();
                                                  }
                                                  /**
                                                   * Returns <code>rnd.nextInt()</code>, where <code>rnd</code> is a
                                                   * private static instance of <code>java.util.Random</code>. This instance
                                                   * cannot be changed (as well as a random generator used by standard
                                                   * <code>java.lang.Math.randomInt()</code> method). But its start seed value
                                                   * is initialized by {@link ImmSystemProperties#getClassLongProperty
                                                   * ImmSystemProperties.getClassLongProperty(Math.class, ".RandomStartSeed")}
                                                   * call if this system variable contains a valid long value. So, you can
                                                   * guarantee the stability of all values returned by this method by
                                                   * setting "net.algart.lib.Math.RandomStartSeed" variable to the fixed
                                                   * value while calling "java" utility or by Java call
                                                   * "<code>System.setProperty</code>" performed before the first access
                                                   * to this <code>Math</code> class and to {@link ImmSystemProperties} class.
                                                   *
                                                   * @return the next result of <code>rnd.nextInt()</code> call
                                                   *    (<code>rnd</code> is a private static random generator)
                                                   */
                                                  public static int randomInt() {
                                                    return rnd.nextInt();
                                                  }
                                                  /**
                                                   * Returns <code>rnd.nextLong()</code>, where <code>rnd</code> is a
                                                   * private static instance of <code>java.util.Random</code>. This instance
                                                   * cannot be changed (as well as a random generator used by standard
                                                   * <code>java.lang.Math.randomLong()</code> method). But its start seed value
                                                   * is initialized by {@link ImmSystemProperties#getClassLongProperty
                                                   * ImmSystemProperties.getClassLongProperty(Math.class, ".RandomStartSeed")}
                                                   * call if this system variable contains a valid long value. So, you can
                                                   * guarantee the stability of all values returned by this method by
                                                   * setting "net.algart.lib.Math.RandomStartSeed" variable to the fixed
                                                   * value while calling "java" utility or by Java call
                                                   * "<code>System.setProperty</code>" performed before the first access
                                                   * to this <code>Math</code> class and to {@link ImmSystemProperties} class.
                                                   *
                                                   * @return the next result of <code>rnd.nextLong()</code> call
                                                   *    (<code>rnd</code> is a private static random generator)
                                                   */
                                                  public static long randomLong() {
                                                    return rnd.nextLong();
                                                  }
                                                  /**
                                                   * Returns <code>rnd.nextGaussian()</code>, where <code>rnd</code> is a
                                                   * private static instance of <code>java.util.Random</code>. This instance
                                                   * cannot be changed (as well as a random generator used by standard
                                                   * <code>java.lang.Math.randomGaussian()</code> method). But its start seed value
                                                   * is initialized by {@link ImmSystemProperties#getClassLongProperty
                                                   * ImmSystemProperties.getClassLongProperty(Math.class, ".RandomStartSeed")}
                                                   * call if this system variable contains a valid long value. So, you can
                                                   * guarantee the stability of all values returned by this method by
                                                   * setting "net.algart.lib.Math.RandomStartSeed" variable to the fixed
                                                   * value while calling "java" utility or by Java call
                                                   * "<code>System.setProperty</code>" performed before the first access
                                                   * to this <code>Math</code> class and to {@link ImmSystemProperties} class.
                                                   *
                                                   * @return the next result of <code>rnd.nextGaussian()</code> call
                                                   *    (<code>rnd</code> is a private static random generator)
                                                   */
                                                  public static double randomGaussian() {
                                                    return rnd.nextGaussian();
                                                  }/*Repeat.AutoGeneratedEnd*/
