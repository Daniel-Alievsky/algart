package net.algart.lib;

/**
 * <p>Recommended to be used instead standard <code>System.getProperty</code> call.
 *
 * <p>This class loads all system properties in the static initialization section
 * (by <code>System.getProperties()</code> call)
 * into an internal table. After initialization,
 * all properties returned by the methods of this class are immutable.
 * You can act on the values returned by this class only
 * by <code>System.setProperty</code> calls placed
 * before the first access to <code>ImmSystemProperties</code>.
 *
 * <p>Unlike <code>System.getProperty</code> calls, this class never
 * throws <code>SecurityException</code>. If such an exception
 * is occurred while getting all system properties in the static initialization
 * section (in other words, while the <code>System.getProperties()</code> call),
 * then this exception is catched and ignored, and the internal properties table
 * stays empty. This means that every method of this class returning
 * some property will work just the same as if this property does not exist.
 *
 * <p>This rule does not regard the following "<i>priviliged</i>" properties:<ul>
 * <li><code>"line.separator"</code>,
 * <li><code>"file.separator"</code>,
 * <li><code>"path.separator"</code>.
 * </ul>
 * Even in a case when these properties cannot be loaded through normal
 * <code>System.getProperties()</code> call (due to security reasons),
 * they are calculated on the base of standard Java Runtime libraries.
 * (For example, <code>"file.separator"</code> and <code>"path.separator"</code>
 * are copied from <code>java.io.File.separator</code> and
 * <code>java.io.File.pathSeparator</code> constants.) So, you can
 * always get these properties by methods of this class or, that is
 * more simple, by the corresponding class constants: {@link #LINE_SEPARATOR},
 * {@link #FILE_SEPARATOR}, {@link #PATH_SEPARATOR}.
 * </ul>
 *
 * @author  Daniel Alievsky
 * @version 1.0
 */


public final class ImmSystemProperties implements TrueStatic {
// TrueStatic is necessary because returned properties should be immutable

  // Don't let anyone instantiate this class
  private ImmSystemProperties() {}

  /**
   * The standard sequence of characters that separates lines in text files and
   * console output. Depends on operating system: <code>"\n"</code> on Unix-like systems,
   * <code>"\r\n"</code> on DOS/Windows family, <code>"\r"</code> on Macintosh.
   *
   * <p>Standard <code>System.out.println()</code> call is equivalent to
   * <code>System.out.print(LINE_SEPARATOR)</code>.
   *
   * <p>If you want to print several lines on the console by a single call
   * of <code>System.out.println</code>, you <b>must always use
   * <code>LINE_SEPARATOR</code></b> to separate lines instead more simple
   * <code>"\n"</code>. For example, the call<pre>
   *
   *    System.out.println("First line\nSecond line");
   * </pre>
   * <b>is incorrect</b> (unlike an analogous call in C/C++): it will not properly
   * work under Macintosh. The following call should be called instead:<pre>
   *
   *    System.out.println("First line" + Out.LINE_SEPARATOR + "Second line");
   * </pre>
   * You can also use the following more simple call that is also correct:<pre>
   *
   *    {@link Out#println(String) Out.println}("First line\nSecond line")
   * </pre>
   * <p><code>LINE_SEPARATOR</code> is also recommended to be used while
   * creating text files that should be then used by other software installed
   * on the same operating system.
   *
   * @see Out#print(String)
   * @see Out#println(String)
   */
  public static final String LINE_SEPARATOR;
  public static final char FILE_SEPARATOR = java.io.File.separatorChar;
  public static final char PATH_SEPARATOR = java.io.File.pathSeparatorChar;

  public static ImmMap getProperties() {
    return propertiesPrivate;
  }
  public static String getProperty(String key) {
    return (String)propertiesPrivate.get(key);
  }
  public static String getProperty(String key, String defaultValue) {
    String result = getProperty(key);
    if (result == null) return defaultValue;
    return result;
  }

  public static boolean getBooleanProperty(String key, boolean defaultValue) {
    Boolean result = getBooleanProperty(key);
    if (result == null) return defaultValue;
    return result.booleanValue();
  }

  public static Boolean getBooleanProperty(String key) {
    String result = getProperty(key);
    if (result == null) return null;
    return Boolean.valueOf(result);
  }

  public static int getIntProperty(String key, int defaultValue) {
    Integer result = getIntProperty(key);
    if (result == null) return defaultValue;
    return result.intValue();
  }

  public static Integer getIntProperty(String key) {
    String result = getProperty(key);
    if (result == null) return null;
    try {
      return Integer.valueOf(result);
    } catch (NumberFormatException e) {
      return null;
    }
  }

  public static long getLongProperty(String key, long defaultValue) {
    Long result = getLongProperty(key);
    if (result == null) return defaultValue;
    return result.longValue();
  }

  public static Long getLongProperty(String key) {
    String result = getProperty(key);
    if (result == null) return null;
    try {
      return Long.valueOf(result);
    } catch (NumberFormatException e) {
      return null;
    }
  }

  public static String getClassPropertyName(Class clazz, String key) {
    return clazz.getName() + "." + key;
  }
  public static String getClassProperty(Class clazz, String key) {
    return getProperty(getClassPropertyName(clazz,key));
  }
  public static String getClassProperty(Class clazz, String key, String defaultValue) {
    return getProperty(getClassPropertyName(clazz,key),defaultValue);
  }
  public static boolean getClassBooleanProperty(Class clazz, String key, boolean defaultValue) {
    return getBooleanProperty(getClassPropertyName(clazz,key),defaultValue);
  }
  public static Boolean getClassBooleanProperty(Class clazz, String key) {
    return getBooleanProperty(getClassPropertyName(clazz,key));
  }
  public static int getClassIntProperty(Class clazz, String key, int defaultValue) {
    return getIntProperty(getClassPropertyName(clazz,key),defaultValue);
  }
  public static Integer getClassIntProperty(Class clazz, String key) {
    return getIntProperty(getClassPropertyName(clazz,key));
  }
  public static long getClassLongProperty(Class clazz, String key, long defaultValue) {
    return getLongProperty(getClassPropertyName(clazz,key),defaultValue);
  }
  public static Long getClassLongProperty(Class clazz, String key) {
    return getLongProperty(getClassPropertyName(clazz,key));
  }
  public static int getClassDebugLevel(Class clazz) {
    return getClassIntProperty(clazz, "DEBUG_LEVEL", 0);
  }

  private static final ImmMap propertiesPrivate;
  static {
    java.util.Properties systemProperties = null;
    try {
      systemProperties = (java.util.Properties)System.getProperties().clone();
    } catch (Throwable e) {
      systemProperties = new java.util.Properties();
    }

    String lineSeparator = (String)systemProperties.get("line.separator");
    if (lineSeparator == null) {
      try {
        lineSeparator = System.getProperty("line.separator");
      } catch (Throwable e) {
      }
    }
    if (lineSeparator == null) {
      try {
        java.io.StringWriter writer = new java.io.StringWriter(8);
        java.io.BufferedWriter bufferedWriter = new java.io.BufferedWriter(writer,8);
        bufferedWriter.newLine();
        bufferedWriter.flush();
        bufferedWriter.close();
        lineSeparator = writer.toString();
      } catch (java.io.IOException e) { // - to be on the safe side
        lineSeparator = "\n";
      }
    }
    LINE_SEPARATOR = lineSeparator;
    systemProperties.put("line.separator", LINE_SEPARATOR);
    systemProperties.put("file.separator", java.io.File.separator);
    systemProperties.put("path.separator", java.io.File.pathSeparator);
    propertiesPrivate = new ImmMap(systemProperties);
  }
}