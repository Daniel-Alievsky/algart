    static class MappingSettings {
        final DataFileModel dataFileModel; // necessary for deletion
        final DataFile dataFile;
        final long dataFileStartOffset;
        final boolean temporary;
        final boolean readOnly;
        final int numberOfBanks; // should be >=2
        final long bankSizeInElements; // should be 2^k (for bits - in bits, not in longs)
        final int bankSizeInBytes;
        final int simultaneousMappingsLimit;

        private MappingSettings(DataFileModel dataFileModel,
            DataFile dataFile, long dataFileStartOffset,
            boolean temporary, boolean readOnly,
            long bankSizeInElements)
        {
            if (dataFileModel == null)
                throw new NullPointerException("Null dataFileModel argument");
            if (dataFile == null)
                throw new NullPointerException("Null dataFile argument");
            int numberOfBanks = dataFileModel.recommendedNumberOfBanks();
            int bankSizeInBytes = dataFileModel.recommendedBankSize();
            checkBankArguments(numberOfBanks, bankSizeInBytes);
            this.dataFileModel = dataFileModel;
            this.dataFile = dataFile;
            this.dataFileStartOffset = dataFileStartOffset;
            this.temporary = temporary;
            this.readOnly = readOnly;
            this.numberOfBanks = numberOfBanks;
            this.bankSizeInBytes = bankSizeInBytes;
            this.bankSizeInElements = bankSizeInElements;
            this.simultaneousMappingsLimit = dataFileModel.simultaneousMappingsLimit();
        }
        ......


        private void mappingCleaner() {
            if (ms.simultaneousMappingsLimit <= 0)
                return;
            int limit = Math.max(ms.numberOfBanks, ms.simultaneousMappingsLimit);
            int mapCount;
            synchronized (lockForGc) {
                mapCount = this.mappingCounter;
            }
            if (mapCount <= limit)
                return;
            int desiredLimit = Math.max(ms.numberOfBanks, limit / 4);

            double bankSizeInMB = ms.bankSizeInBytes / (1024.0 * 1024.0);
            double timeoutInSec = 2 * mapCount * bankSizeInMB /
                Math.max(ms.dataFileModel.estimatedMinimalDiskSpeed(), 0.01);
            timeoutInSec = Math.max(timeoutInSec, 10.0); // not less then 10 seconds
            long timeoutInMillis = (long)(timeoutInSec * 1000.0);
            String msg = "The number of simultaneous mappings ("
                + mapCount + ") exceeds the limit (" + limit + ")";
            LargeMemoryModel.LOGGER.fine(msg + "; garbage collection and waiting (up to "
                + InternalUtils.toString(timeoutInSec, 2) + " sec)...");

            releaseFileAndMapping();
            long tStart = System.currentTimeMillis(), tFix = tStart, t = tStart;
            boolean ok = false;
            int iterationCount = 0;
            for (; ;) {
                System.gc();
                // do not call System.runFinalization(): sometimes in produces
                // "OutOfMemoryError: unable to create new native thread"
                try {
                    Thread.sleep(5);
                } catch (InterruptedException ex) {
                    // ?? I don't sure that I don't need to
                    // call Thread.currentThread().interrupt() here
                }
                synchronized (lockForGc) {
                    mapCount = this.mappingCounter;
                }
                iterationCount++;
                t = System.currentTimeMillis();

                if (mapCount < desiredLimit) {
                    ok = true;
                    break;
                }
                if (iterationCount > 4) { // at least 4 iterations: to be on the safe side
                    if (t - tStart > timeoutInMillis)
                        break;
                }
            }
            if (ok) {
                LargeMemoryModel.LOGGER.fine(
                    "The number of simultaneous mappings is successfully reduced to " + mapCount
                    + " (" + (t - tStart) + " ms, "
                    + iterationCount + " iteration" + (iterationCount > 1 ? "s)" : ")"));
            } else {
                Error ex = InternalUtils.createIOError(new IOException(msg
                    + "; cannot free simultaneous mappings in " + timeoutInMillis + " ms"));
                LargeMemoryModel.LOGGER.log(Level.SEVERE,
                    "Cannot reduce enough the number of simultaneous mappings: current value " + mapCount
                    + " (" + (t - tStart) + " ms, "
                    + iterationCount + " iteration" + (iterationCount > 1 ? "s)" : ")"), ex);
                throw ex;
            }
        }

        private void loadBank(int bank, long position) {
            assert (position & 7) == 0;
            mappingCleaner();
            ......

