package net.algart.math.patterns;

import java.util.*;
import net.algart.math.IPoint;

/**
 * <p>Special implementation of the simple pattern,
 * returned by {@link Patterns#newIPattern(Collection)} method, for a case of 1 point.</p>
 *
 * <p>AlgART Laboratory 2007-2012</p>
 *
 * @author Daniel Alievsky
 * @version 1.2
 * @since JDK 1.5
 */
final class OnePointIPattern extends AbstractIntegerPattern implements Pattern {
    private final IPoint p;

    OnePointIPattern(IPoint p) {
        super(p.coordCount(), true);
        this.p = p;
    }

    @Override
    public long pointCount() {
        return 1;
    }

    @Override
    public boolean contains(IPoint point) {
        if (point == null)
            throw new NullPointerException("Null point argument");
        if (point.coordCount() != dimCount())
            throw new IllegalArgumentException("The number of point coordinates " + point.coordCount()
                + " is not equal to the number of pattern coordinates " + dimCount());
        return this.p.equals(point);
    }

    @Override
    public Set<IPoint> roundedPoints() {
        return Collections.singleton(p);
    }

    @Override
    public IPoint roundedCoordMin() {
        return p;
    }

    @Override
    public IPoint roundedCoordMax() {
        return p;
    }

    @Override
    public boolean isOriginPoint() {
        return p.isOrigin();
    }

    @Override
    public boolean isRectangular() {
        return true;
    }

    @Override
    public Pattern projectionAlongAxis(int coordIndex) {
        checkCoordIndex(coordIndex);
        assert dimCount > 0;
        if (dimCount == 1)
            throw new IllegalStateException("Cannot perform projection for 1-dimensional pattern");
        return new OnePointIPattern(p.projectionAlongAxis(coordIndex));
    }

    @Override
    public UniformGridPattern shift(IPoint shift) {
        if (shift == null)
            throw new NullPointerException("Null shift argument");
        if (shift.coordCount() != dimCount())
            throw new IllegalArgumentException("The number of shift coordinates " + shift.coordCount()
                + " is not equal to the number of pattern coordinates " + dimCount());
        if (shift.isOrigin())
            return this;
        return new OnePointIPattern(p.add(shift));
    }

    @Override
    public UniformGridPattern scale(double... multipliers) {
        if (multipliers == null)
            throw new NullPointerException("Null multipliers argument");
        if (multipliers.length != dimCount())
            throw new IllegalArgumentException("Illegal number of multipliers: "
                + multipliers.length + " instead of " + dimCount());
        return new OnePointIPattern(p.roundedScale(multipliers));
    }



    @Override
    public Pattern minkowskiAdd(Pattern added) {
        if (added == null)
            throw new NullPointerException("Null added argument");
        if (added.dimCount() != this.dimCount())
            throw new IllegalArgumentException("Dimensions count mismatch: "
                + added.dimCount() + " instead of " + this.dimCount());
        return added.shift(this.p);
    }

    @Override
    public boolean hasMinkowskiDecomposition() {
        return false;
    }

    @Override
    public String toString() {
        return dimCount() + "D 1-point pattern (" + p + ")";
    }

    @Override
    public int hashCode() {
        return roundedPoints().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof SimpleIPattern || obj instanceof TwoPointsIPattern || obj instanceof OnePointIPattern))
            return false;
        if (obj == this)
            return true;
        return ((Pattern)obj).roundedPoints().equals(this.roundedPoints());
    }
}
