/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2007-2024 Daniel Alievsky, AlgART Laboratory (http://algart.net)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package net.algart.arrays.demo;

import net.algart.arrays.*;

import java.util.List;

public class ArrayQuickAccessTest {
    private static void checkArray(Array array, boolean cannotBeWrapper) {
        Object ja = array.ja();
        Object ja2 = array.ja();
        assert ja != null && ja2 != null;
        final boolean wrapper = array.isJavaArrayWrapper();
        if (wrapper && cannotBeWrapper) {
            throw new AssertionError("Unexpected wrapper!");
        }
        final Object javaArray = array instanceof DirectAccessible da && da.hasJavaArray() ? da.javaArray() : null;
        final int offset = array instanceof DirectAccessible da && da.hasJavaArray() ? da.javaArrayOffset() : -1;
        if (javaArray == null) {
            System.out.printf("%s%n    usual, ja() = %s, %s%n", array, ja, ja2);
            assert !wrapper;
        } else {
            assert ((DirectAccessible) array).javaArrayLength() == array.length() : "Invalid javaArrayLength()";
            int length = java.lang.reflect.Array.getLength(javaArray);
            assert wrapper == (offset == 0 && length == array.length());
            System.out.printf("%s%n    direct-accessible %s[%d] (%s), offset %d%s%n",
                    array,
                    javaArray.getClass().getComponentType().getSimpleName(), length,
                    length == array.length() ? "the same length" : "DIFFERENT length",
                    offset,
                    wrapper ? ": WRAPPER" : "");
        }
        if (wrapper) {
            assert ja == javaArray : ("ja()/DirectAccessible content mismatch");
            assert ja2 == ja;
        } else {
            assert ja != ja2;
        }
        compareJa(array);
    }

    private static void check(Array array, boolean cannotBeWrapper) {
        System.out.printf("%nTesting %s and its sub-arrays...%n", array);
        checkArray(array, cannotBeWrapper);
        checkArray(array.asImmutable(), true);
        checkArray(array.subArray(0, array.length()), cannotBeWrapper);
        checkArray(array.subArray(10, array.length()), true);
        checkArray(array.subArray(10, array.length()).asImmutable(), true);
        checkArray(array.subArr(1, 0), true);
    }

    private static void compareJa(Array array) {
        boolean wrapper = array.isJavaArrayWrapper();
        final Object ja = array.ja();
        //[[Repeat() Bit ==> Char,,Byte,,Short,,Int,,Long,,Float,,Double;;
        //           boolean ==> char,,byte,,short,,int,,long,,float,,double]]
        if (array instanceof BitArray a) {
            boolean[] j = a.ja();
            if (wrapper ? j != ja : !JArrays.arrayEquals(j, 0, ja, 0, j.length)) {
                throw new AssertionError();
            }
        }
        //[[Repeat.AutoGeneratedStart !! Auto-generated: NOT EDIT !! ]]
        if (array instanceof CharArray a) {
            char[] j = a.ja();
            if (wrapper ? j != ja : !JArrays.arrayEquals(j, 0, ja, 0, j.length)) {
                throw new AssertionError();
            }
        }
        if (array instanceof ByteArray a) {
            byte[] j = a.ja();
            if (wrapper ? j != ja : !JArrays.arrayEquals(j, 0, ja, 0, j.length)) {
                throw new AssertionError();
            }
        }
        if (array instanceof ShortArray a) {
            short[] j = a.ja();
            if (wrapper ? j != ja : !JArrays.arrayEquals(j, 0, ja, 0, j.length)) {
                throw new AssertionError();
            }
        }
        if (array instanceof IntArray a) {
            int[] j = a.ja();
            if (wrapper ? j != ja : !JArrays.arrayEquals(j, 0, ja, 0, j.length)) {
                throw new AssertionError();
            }
        }
        if (array instanceof LongArray a) {
            long[] j = a.ja();
            if (wrapper ? j != ja : !JArrays.arrayEquals(j, 0, ja, 0, j.length)) {
                throw new AssertionError();
            }
        }
        if (array instanceof FloatArray a) {
            float[] j = a.ja();
            if (wrapper ? j != ja : !JArrays.arrayEquals(j, 0, ja, 0, j.length)) {
                throw new AssertionError();
            }
        }
        if (array instanceof DoubleArray a) {
            double[] j = a.ja();
            if (wrapper ? j != ja : !JArrays.arrayEquals(j, 0, ja, 0, j.length)) {
                throw new AssertionError();
            }
        }
        //[[Repeat.AutoGeneratedEnd]]
        if (wrapper && array instanceof ObjectArray<?> a) {
            Object[] j = a.ja();
            if (j != ja) {
                throw new AssertionError();
            }
        }
    }

    private static class TestArray extends AbstractDoubleArray {
        final double[] ja;

        public TestArray(double[] ja) {
            super(ja.length, false);
            this.ja = ja;
        }

        @Override
        public double getDouble(long index) {
            return ja[(int) index];
        }
    }

    private static class TestDAArray extends TestArray implements DirectAccessible {
        public TestDAArray(double[] ja) {
            super(ja);
        }

        @Override
        public boolean hasJavaArray() {
            return true;
        }

        @Override
        public Object javaArray() {
            return ja;
        }

        @Override
        public int javaArrayOffset() {
            return 0;
        }

        @Override
        public int javaArrayLength() {
            return ja.length;
        }

        @Override
        public boolean isImmutable() {
            return false;
        }

        @Override
        public DoubleArray asImmutable() {
            return DoubleArray.as(ja).asImmutable();
        }
    }

    public static void main(String[] args) {
        for (MemoryModel mm : List.of(Arrays.SMM, BufferMemoryModel.getInstance(), LargeMemoryModel.getInstance())) {
            final boolean nonSMM = mm != Arrays.SMM;
            check(mm.newUnresizableBitArray(1000), nonSMM);
            check(mm.newUnresizableFloatArray(1000), nonSMM);
            check(mm.newEmptyCharArray(10000).length(1000), true);
            check(mm.newIntArray(1000), nonSMM);
            check(mm.newShortMatrix(100, 100).array(), nonSMM);
            if (mm.isElementTypeSupported(Object.class)) {
                check(mm.newObjectArray(String.class, 100), nonSMM);
            }
        }
        check(Arrays.nIntCopies(1000, 1), true);
        check(Arrays.nBitCopies(100, false), true);
        check(Arrays.nObjectCopies(10033, null), true);
        double[] doubles = new double[1000];
        check(new TestArray(doubles), true);
        check(new TestDAArray(doubles), false);
    }
}
