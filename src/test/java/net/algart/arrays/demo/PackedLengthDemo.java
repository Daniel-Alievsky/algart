/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2007-2024 Daniel Alievsky, AlgART Laboratory (http://algart.net)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package net.algart.arrays.demo;

import net.algart.arrays.PackedBitArrays;
import net.algart.arrays.PackedBitArraysPer8;
import net.algart.arrays.PackedBitBuffers;

public class PackedLengthDemo {
    /*Repeat() PackedBitArrays ==> PackedBitBuffers,,PackedBitArraysPer8 */

    private static void testPackedBitArrays(long length) {
        System.out.println("PackedBitArrays");
        long r = 0;
        try {
            System.out.printf("packedLength(long): %d%n", r = PackedBitArrays.packedLength(length));
        } catch (RuntimeException e) {
            System.out.printf("packedLength(long): %s%n", e.getMessage());
        }
        if (r < 0) throw new AssertionError();
        try {
            System.out.printf("packedLength32(long): %d%n", r = PackedBitArrays.packedLength32(length));
        } catch (RuntimeException e) {
            System.out.printf("packedLength32(long): %s%n", e.getMessage());
        }
        if (r < 0) throw new AssertionError();
        try {
            System.out.printf("packedLength32(int): %d%n", r = PackedBitArrays.packedLength32((int) length));
        } catch (RuntimeException e) {
            System.out.printf("packedLength32(int): %s%n", e.getMessage());
        }
        if (r < 0) throw new AssertionError();
        try {
            System.out.printf("unpackedLength: %d%n", r = PackedBitArrays.unpackedLength(length));
        } catch (RuntimeException e) {
            System.out.printf("unpackedLength: %s%n", e.getMessage());
            System.out.println(e.getMessage());
        }
        if (r < 0) throw new AssertionError();
    }

    /*Repeat.AutoGeneratedStart !! Auto-generated: NOT EDIT !! */

    private static void testPackedBitBuffers(long length) {
        System.out.println("PackedBitBuffers");
        long r = 0;
        try {
            System.out.printf("packedLength(long): %d%n", r = PackedBitBuffers.packedLength(length));
        } catch (RuntimeException e) {
            System.out.printf("packedLength(long): %s%n", e.getMessage());
        }
        if (r < 0) throw new AssertionError();
        try {
            System.out.printf("packedLength32(long): %d%n", r = PackedBitBuffers.packedLength32(length));
        } catch (RuntimeException e) {
            System.out.printf("packedLength32(long): %s%n", e.getMessage());
        }
        if (r < 0) throw new AssertionError();
        try {
            System.out.printf("packedLength32(int): %d%n", r = PackedBitBuffers.packedLength32((int) length));
        } catch (RuntimeException e) {
            System.out.printf("packedLength32(int): %s%n", e.getMessage());
        }
        if (r < 0) throw new AssertionError();
        try {
            System.out.printf("unpackedLength: %d%n", r = PackedBitBuffers.unpackedLength(length));
        } catch (RuntimeException e) {
            System.out.printf("unpackedLength: %s%n", e.getMessage());
            System.out.println(e.getMessage());
        }
        if (r < 0) throw new AssertionError();
    }

    private static void testPackedBitArraysPer8(long length) {
        System.out.println("PackedBitArraysPer8");
        long r = 0;
        try {
            System.out.printf("packedLength(long): %d%n", r = PackedBitArraysPer8.packedLength(length));
        } catch (RuntimeException e) {
            System.out.printf("packedLength(long): %s%n", e.getMessage());
        }
        if (r < 0) throw new AssertionError();
        try {
            System.out.printf("packedLength32(long): %d%n", r = PackedBitArraysPer8.packedLength32(length));
        } catch (RuntimeException e) {
            System.out.printf("packedLength32(long): %s%n", e.getMessage());
        }
        if (r < 0) throw new AssertionError();
        try {
            System.out.printf("packedLength32(int): %d%n", r = PackedBitArraysPer8.packedLength32((int) length));
        } catch (RuntimeException e) {
            System.out.printf("packedLength32(int): %s%n", e.getMessage());
        }
        if (r < 0) throw new AssertionError();
        try {
            System.out.printf("unpackedLength: %d%n", r = PackedBitArraysPer8.unpackedLength(length));
        } catch (RuntimeException e) {
            System.out.printf("unpackedLength: %s%n", e.getMessage());
            System.out.println(e.getMessage());
        }
        if (r < 0) throw new AssertionError();
    }

    /*Repeat.AutoGeneratedEnd*/

    public static void main(String[] args) {
        for (int k = 0; k < 63; k++) {
            long decrement = k <= 10 ? 0 : 100;
            long length = (1L << k) - decrement;
            System.out.printf("%n2^%d-%d = %d = %e:%n", k, decrement, length, (double) length);
            testPackedBitArrays(length);
            testPackedBitBuffers(length);
            testPackedBitArraysPer8(length);
        }
    }
}
