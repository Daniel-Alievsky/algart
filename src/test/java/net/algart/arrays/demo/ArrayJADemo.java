/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2007-2024 Daniel Alievsky, AlgART Laboratory (http://algart.net)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package net.algart.arrays.demo;

import net.algart.arrays.Arrays;
import net.algart.arrays.JArrays;
import net.algart.arrays.UpdatablePArray;

public class ArrayJADemo {
    @SuppressWarnings("ImplicitArrayToString")
    public static void main(String[] args) {
        if (args.length < 2) {
            System.out.println("Usage: " + ArrayJADemo.class.getName()
                    + " elementType arrayLength");
            return;
        }
        String elementType = args[0];
        int arrayLength = Integer.parseInt(args[1]);
        UpdatablePArray array = (UpdatablePArray) Arrays.SMM.newUnresizableArray(
                DemoUtils.elementType(elementType),
                arrayLength);
        final double scale = array.maxPossibleValue(1000.0);
        for (long p = 0; p < arrayLength; p++) {
            array.setDouble(p, scale * p / (double) arrayLength);
        }

        System.out.println(array + ": " + Arrays.toString(array, ", ", 160));
        Object a = array.ja();
        System.out.println("Java array: " + a);
        //[[Repeat() byte ==> short,,int,,long,,float,,double;;
        //           Byte ==> Short,,Int,,Long,,Float,,Double]]
        byte[] bytes = array.jaByte();
        System.out.println("bytes: " + bytes + ", " + JArrays.toString(bytes, ", ", 160));
        bytes = Arrays.toByteJavaArray(new byte[arrayLength + 2], array);
        System.out.println("larger: " + bytes + ", " + JArrays.toString(bytes, ", ", 160));
        //[[Repeat.AutoGeneratedStart !! Auto-generated: NOT EDIT !! ]]
        short[] shorts = array.jaShort();
        System.out.println("shorts: " + shorts + ", " + JArrays.toString(shorts, ", ", 160));
        shorts = Arrays.toShortJavaArray(new short[arrayLength + 2], array);
        System.out.println("larger: " + shorts + ", " + JArrays.toString(shorts, ", ", 160));
        int[] ints = array.jaInt();
        System.out.println("ints: " + ints + ", " + JArrays.toString(ints, ", ", 160));
        ints = Arrays.toIntJavaArray(new int[arrayLength + 2], array);
        System.out.println("larger: " + ints + ", " + JArrays.toString(ints, ", ", 160));
        long[] longs = array.jaLong();
        System.out.println("longs: " + longs + ", " + JArrays.toString(longs, ", ", 160));
        longs = Arrays.toLongJavaArray(new long[arrayLength + 2], array);
        System.out.println("larger: " + longs + ", " + JArrays.toString(longs, ", ", 160));
        float[] floats = array.jaFloat();
        System.out.println("floats: " + floats + ", " + JArrays.toString(floats, ", ", 160));
        floats = Arrays.toFloatJavaArray(new float[arrayLength + 2], array);
        System.out.println("larger: " + floats + ", " + JArrays.toString(floats, ", ", 160));
        double[] doubles = array.jaDouble();
        System.out.println("doubles: " + doubles + ", " + JArrays.toString(doubles, ", ", 160));
        doubles = Arrays.toDoubleJavaArray(new double[arrayLength + 2], array);
        System.out.println("larger: " + doubles + ", " + JArrays.toString(doubles, ", ", 160));
        //[[Repeat.AutoGeneratedEnd]]
    }
}
