/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2007-2025 Daniel Alievsky, AlgART Laboratory (http://algart.net)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package net.algart.arrays;

/**
 * <p>Service interface for {@link ArraysSubMatrixImpl} class.</p>
 *
 * @author Daniel Alievsky
 */
interface ArraysSubMatrixIndexer {
    boolean bitsBlocksImplemented();

    boolean indexOfImplemented();

    long translate(long index);

    void getData(long arrayPos, Object destArray, int destArrayOffset, int count);

    void setData(long arrayPos, Object srcArray, int srcArrayOffset, int count);

    void getBits(long arrayPos, long[] destArray, long destArrayOffset, long count);

    void setBits(long arrayPos, long[] srcArray, long srcArrayOffset, long count);

    //[[Repeat() Bit ==> Char,,Byte,,Short,,Int,,Long,,Float,,Double,,Object;;
    //           boolean(?=\s+value) ==> char,,byte,,short,,int,,long,,float,,double,,Object]]
    long indexOfBit(long lowIndex, long highIndex, boolean value);

    long lastIndexOfBit(long lowIndex, long highIndex, boolean value);

    void fillBits(long position, long count, boolean value);

    //[[Repeat.AutoGeneratedStart !! Auto-generated: NOT EDIT !! ]]
    long indexOfChar(long lowIndex, long highIndex, char value);

    long lastIndexOfChar(long lowIndex, long highIndex, char value);

    void fillChars(long position, long count, char value);

    long indexOfByte(long lowIndex, long highIndex, byte value);

    long lastIndexOfByte(long lowIndex, long highIndex, byte value);

    void fillBytes(long position, long count, byte value);

    long indexOfShort(long lowIndex, long highIndex, short value);

    long lastIndexOfShort(long lowIndex, long highIndex, short value);

    void fillShorts(long position, long count, short value);

    long indexOfInt(long lowIndex, long highIndex, int value);

    long lastIndexOfInt(long lowIndex, long highIndex, int value);

    void fillInts(long position, long count, int value);

    long indexOfLong(long lowIndex, long highIndex, long value);

    long lastIndexOfLong(long lowIndex, long highIndex, long value);

    void fillLongs(long position, long count, long value);

    long indexOfFloat(long lowIndex, long highIndex, float value);

    long lastIndexOfFloat(long lowIndex, long highIndex, float value);

    void fillFloats(long position, long count, float value);

    long indexOfDouble(long lowIndex, long highIndex, double value);

    long lastIndexOfDouble(long lowIndex, long highIndex, double value);

    void fillDoubles(long position, long count, double value);

    long indexOfObject(long lowIndex, long highIndex, Object value);

    long lastIndexOfObject(long lowIndex, long highIndex, Object value);

    void fillObjects(long position, long count, Object value);

    //[[Repeat.AutoGeneratedEnd]]
}
