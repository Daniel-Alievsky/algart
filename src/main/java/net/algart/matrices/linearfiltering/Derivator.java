/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2007-2025 Daniel Alievsky, AlgART Laboratory (http://algart.net)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package net.algart.matrices.linearfiltering;

import net.algart.arrays.*;
import net.algart.math.IPoint;
import net.algart.math.functions.Func;

import java.util.List;

public interface Derivator extends ArrayProcessorWithContextSwitching {

    enum SuppressionMode {
        STRICT(Func.SELECT_IF_GREATER),

        NON_STRICT(Func.SELECT_IF_GREATER_OR_EQUAL);

        final Func selectionFunc;

        SuppressionMode(Func selectionFunc) {
            this.selectionFunc = selectionFunc;
        }

        public Func selectionFunc() {
            return selectionFunc;
        }
    }

    Derivator context(ArrayContext newContext);

    boolean isPseudoCyclic();

    double decrement(Class<?> elementType);

    /*Repeat() max ==> min;; Max ==> Min */
    Matrix<? extends PArray> asMaximumFromShiftedForwardAndBackward(
            Matrix<? extends PArray> src,
            Matrix<? extends PIntegerArray> directionIndexes, IPoint... directions);

    Matrix<? extends UpdatablePArray> maximumFromShiftedForwardAndBackward(
            Matrix<? extends PArray> src,
            Matrix<? extends PIntegerArray> directionIndexes, IPoint... directions);

    void maximumFromShiftedForwardAndBackward(
            Matrix<? extends UpdatablePArray> dest, Matrix<? extends PArray> src,
            Matrix<? extends PIntegerArray> directionIndexes, IPoint... directions);

    Matrix<? extends BitArray> asMaskOfMaximums(
            Matrix<? extends PArray> src,
            SuppressionMode mode, Matrix<? extends PIntegerArray> directionIndexes, IPoint... directions);

    Matrix<? extends UpdatableBitArray> maskOfMaximums(
            Matrix<? extends PArray> src,
            SuppressionMode mode, Matrix<? extends PIntegerArray> directionIndexes, IPoint... directions);

    void maskOfMaximums(
            Matrix<? extends UpdatableBitArray> dest, Matrix<? extends PArray> src,
            SuppressionMode mode, Matrix<? extends PIntegerArray> directionIndexes, IPoint... directions);

    Matrix<? extends PArray> asNonMaximumSuppression(
            Matrix<? extends PArray> src,
            SuppressionMode mode, double filler, Matrix<? extends PIntegerArray> directionIndexes, IPoint... directions);

    Matrix<? extends UpdatablePArray> nonMaximumSuppression(
            Matrix<? extends PArray> src,
            SuppressionMode mode, double filler, Matrix<? extends PIntegerArray> directionIndexes, IPoint... directions);

    void nonMaximumSuppression(
            Matrix<? extends UpdatablePArray> dest, Matrix<? extends PArray> src,
            SuppressionMode mode, double filler, Matrix<? extends PIntegerArray> directionIndexes, IPoint... directions);

    /*Repeat.AutoGeneratedStart !! Auto-generated: NOT EDIT !! */
    Matrix<? extends PArray> asMinimumFromShiftedForwardAndBackward(
            Matrix<? extends PArray> src,
            Matrix<? extends PIntegerArray> directionIndexes, IPoint... directions);

    Matrix<? extends UpdatablePArray> minimumFromShiftedForwardAndBackward(
            Matrix<? extends PArray> src,
            Matrix<? extends PIntegerArray> directionIndexes, IPoint... directions);

    void minimumFromShiftedForwardAndBackward(
            Matrix<? extends UpdatablePArray> dest, Matrix<? extends PArray> src,
            Matrix<? extends PIntegerArray> directionIndexes, IPoint... directions);

    Matrix<? extends BitArray> asMaskOfMinimums(
            Matrix<? extends PArray> src,
            SuppressionMode mode, Matrix<? extends PIntegerArray> directionIndexes, IPoint... directions);

    Matrix<? extends UpdatableBitArray> maskOfMinimums(
            Matrix<? extends PArray> src,
            SuppressionMode mode, Matrix<? extends PIntegerArray> directionIndexes, IPoint... directions);

    void maskOfMinimums(
            Matrix<? extends UpdatableBitArray> dest, Matrix<? extends PArray> src,
            SuppressionMode mode, Matrix<? extends PIntegerArray> directionIndexes, IPoint... directions);

    Matrix<? extends PArray> asNonMinimumSuppression(
            Matrix<? extends PArray> src,
            SuppressionMode mode, double filler, Matrix<? extends PIntegerArray> directionIndexes, IPoint... directions);

    Matrix<? extends UpdatablePArray> nonMinimumSuppression(
            Matrix<? extends PArray> src,
            SuppressionMode mode, double filler, Matrix<? extends PIntegerArray> directionIndexes, IPoint... directions);

    void nonMinimumSuppression(
            Matrix<? extends UpdatablePArray> dest, Matrix<? extends PArray> src,
            SuppressionMode mode, double filler, Matrix<? extends PIntegerArray> directionIndexes, IPoint... directions);

    /*Repeat.AutoGeneratedEnd*/

    Matrix<? extends PIntegerArray> asRoundedDirectionIndex2D(
            Matrix<? extends PArray> vectorX, Matrix<? extends PArray> vectorY);

    IPoint[] roundedDirections2D();

    <T extends PArray> Matrix<T> asModuleOfVector(
            Class<? extends T> requiredType,
            List<? extends Matrix<? extends PArray>> vectorComponents);
}
