/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2007-2019 Daniel Alievsky, AlgART Laboratory (http://algart.net)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package net.algart.matrices.morphology;

/**
 * <p>Some predefined precision characteristics of rank operations, described in {@link RankMorphology}
 * interface.</p>
 *
 * <p>Note: for every {@link #bitLevels() bit levels} array, represented by this enum,
 * there are both instances of this class with <nobr><tt>{@link #interpolated()}==false</tt></nobr>
 * and with <nobr><tt>{@link #interpolated()}==true</tt></nobr>.</p>
 *
 * <p>This class is <b>immutable</b> and <b>thread-safe</b>:
 * there are no ways to modify settings of the created instance.</p>
 *
 * @author Daniel Alievsky
 * @version 1.2
 * @since JDK 1.6
 */
public enum RankPrecision implements CustomRankPrecision {
    /*Repeat() \{1\} ==>       {2},,{3},,{4},,{5},,{6},,{7},,{8},,{4, 8},,{9},,{10},,{5, 10},,
                               {11},,{5, 11},,{12},,{6, 12},,{4, 8, 12},,{13},,{6, 13},,{14},,{7, 14},,
                               {15},,{7, 15},,{5, 10, 15},,{16},,{8, 16},,{5, 10, 16},,
                               {20},,{10, 20},,{6, 13, 20},,{5, 10, 15, 20},,
                               {22},,{11, 22},,{7, 14, 22},,{5, 10, 15, 22},,
                               {24},,{12, 24},,{8, 16, 24},,{6, 12, 18, 24},,{4, 8, 12, 16, 20, 24},,
                               {26},,{13, 26},,{8, 16, 26},,{6, 12, 18, 26};;
               (?<=BITS_)1 ==> 2,,3,,4,,5,,6,,7,,8,,8_PER_4,,9,,10,,10_PER_5,,
                               11,,11_PER_5,,12,,12_PER_6,,12_PER_4,,13,,13_PER_6,,14,,14_PER_7,,
                               15,,15_PER_7,,15_PER_5,,16,,16_PER_8,,16_PER_5,,
                               20,,20_PER_10,,20_PER_7,,20_PER_5,,
                               22,,22_PER_11,,22_PER_7,,22_PER_5,,
                               24,,24_PER_12,,24_PER_8,,24_PER_6,,24_PER_4,,
                               26,,26_PER_13,,26_PER_8,,26_PER_6;;
               (BITS_26_PER_6_\w+\(.*?\))\, ==> $1;,,...
     */
    /**
     * Here <tt>{@link #bitLevels()}={1}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_1(new int[]{1}, false),

    /**
     * Here <tt>{@link #bitLevels()}={1}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_1_INTERPOLATED(new int[]{1}, true),
    /*Repeat.AutoGeneratedStart !! Auto-generated: NOT EDIT !! */
    /**
     * Here <tt>{@link #bitLevels()}={2}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_2(new int[]{2}, false),

    /**
     * Here <tt>{@link #bitLevels()}={2}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_2_INTERPOLATED(new int[]{2}, true),

    /**
     * Here <tt>{@link #bitLevels()}={3}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_3(new int[]{3}, false),

    /**
     * Here <tt>{@link #bitLevels()}={3}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_3_INTERPOLATED(new int[]{3}, true),

    /**
     * Here <tt>{@link #bitLevels()}={4}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_4(new int[]{4}, false),

    /**
     * Here <tt>{@link #bitLevels()}={4}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_4_INTERPOLATED(new int[]{4}, true),

    /**
     * Here <tt>{@link #bitLevels()}={5}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_5(new int[]{5}, false),

    /**
     * Here <tt>{@link #bitLevels()}={5}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_5_INTERPOLATED(new int[]{5}, true),

    /**
     * Here <tt>{@link #bitLevels()}={6}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_6(new int[]{6}, false),

    /**
     * Here <tt>{@link #bitLevels()}={6}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_6_INTERPOLATED(new int[]{6}, true),

    /**
     * Here <tt>{@link #bitLevels()}={7}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_7(new int[]{7}, false),

    /**
     * Here <tt>{@link #bitLevels()}={7}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_7_INTERPOLATED(new int[]{7}, true),

    /**
     * Here <tt>{@link #bitLevels()}={8}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_8(new int[]{8}, false),

    /**
     * Here <tt>{@link #bitLevels()}={8}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_8_INTERPOLATED(new int[]{8}, true),

    /**
     * Here <tt>{@link #bitLevels()}={4, 8}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_8_PER_4(new int[]{4, 8}, false),

    /**
     * Here <tt>{@link #bitLevels()}={4, 8}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_8_PER_4_INTERPOLATED(new int[]{4, 8}, true),

    /**
     * Here <tt>{@link #bitLevels()}={9}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_9(new int[]{9}, false),

    /**
     * Here <tt>{@link #bitLevels()}={9}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_9_INTERPOLATED(new int[]{9}, true),

    /**
     * Here <tt>{@link #bitLevels()}={10}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_10(new int[]{10}, false),

    /**
     * Here <tt>{@link #bitLevels()}={10}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_10_INTERPOLATED(new int[]{10}, true),

    /**
     * Here <tt>{@link #bitLevels()}={5, 10}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_10_PER_5(new int[]{5, 10}, false),

    /**
     * Here <tt>{@link #bitLevels()}={5, 10}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_10_PER_5_INTERPOLATED(new int[]{5, 10}, true),

    /**
     * Here <tt>{@link #bitLevels()}={11}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_11(new int[]{11}, false),

    /**
     * Here <tt>{@link #bitLevels()}={11}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_11_INTERPOLATED(new int[]{11}, true),

    /**
     * Here <tt>{@link #bitLevels()}={5, 11}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_11_PER_5(new int[]{5, 11}, false),

    /**
     * Here <tt>{@link #bitLevels()}={5, 11}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_11_PER_5_INTERPOLATED(new int[]{5, 11}, true),

    /**
     * Here <tt>{@link #bitLevels()}={12}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_12(new int[]{12}, false),

    /**
     * Here <tt>{@link #bitLevels()}={12}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_12_INTERPOLATED(new int[]{12}, true),

    /**
     * Here <tt>{@link #bitLevels()}={6, 12}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_12_PER_6(new int[]{6, 12}, false),

    /**
     * Here <tt>{@link #bitLevels()}={6, 12}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_12_PER_6_INTERPOLATED(new int[]{6, 12}, true),

    /**
     * Here <tt>{@link #bitLevels()}={4, 8, 12}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_12_PER_4(new int[]{4, 8, 12}, false),

    /**
     * Here <tt>{@link #bitLevels()}={4, 8, 12}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_12_PER_4_INTERPOLATED(new int[]{4, 8, 12}, true),

    /**
     * Here <tt>{@link #bitLevels()}={13}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_13(new int[]{13}, false),

    /**
     * Here <tt>{@link #bitLevels()}={13}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_13_INTERPOLATED(new int[]{13}, true),

    /**
     * Here <tt>{@link #bitLevels()}={6, 13}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_13_PER_6(new int[]{6, 13}, false),

    /**
     * Here <tt>{@link #bitLevels()}={6, 13}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_13_PER_6_INTERPOLATED(new int[]{6, 13}, true),

    /**
     * Here <tt>{@link #bitLevels()}={14}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_14(new int[]{14}, false),

    /**
     * Here <tt>{@link #bitLevels()}={14}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_14_INTERPOLATED(new int[]{14}, true),

    /**
     * Here <tt>{@link #bitLevels()}={7, 14}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_14_PER_7(new int[]{7, 14}, false),

    /**
     * Here <tt>{@link #bitLevels()}={7, 14}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_14_PER_7_INTERPOLATED(new int[]{7, 14}, true),

    /**
     * Here <tt>{@link #bitLevels()}={15}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_15(new int[]{15}, false),

    /**
     * Here <tt>{@link #bitLevels()}={15}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_15_INTERPOLATED(new int[]{15}, true),

    /**
     * Here <tt>{@link #bitLevels()}={7, 15}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_15_PER_7(new int[]{7, 15}, false),

    /**
     * Here <tt>{@link #bitLevels()}={7, 15}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_15_PER_7_INTERPOLATED(new int[]{7, 15}, true),

    /**
     * Here <tt>{@link #bitLevels()}={5, 10, 15}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_15_PER_5(new int[]{5, 10, 15}, false),

    /**
     * Here <tt>{@link #bitLevels()}={5, 10, 15}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_15_PER_5_INTERPOLATED(new int[]{5, 10, 15}, true),

    /**
     * Here <tt>{@link #bitLevels()}={16}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_16(new int[]{16}, false),

    /**
     * Here <tt>{@link #bitLevels()}={16}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_16_INTERPOLATED(new int[]{16}, true),

    /**
     * Here <tt>{@link #bitLevels()}={8, 16}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_16_PER_8(new int[]{8, 16}, false),

    /**
     * Here <tt>{@link #bitLevels()}={8, 16}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_16_PER_8_INTERPOLATED(new int[]{8, 16}, true),

    /**
     * Here <tt>{@link #bitLevels()}={5, 10, 16}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_16_PER_5(new int[]{5, 10, 16}, false),

    /**
     * Here <tt>{@link #bitLevels()}={5, 10, 16}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_16_PER_5_INTERPOLATED(new int[]{5, 10, 16}, true),

    /**
     * Here <tt>{@link #bitLevels()}={20}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_20(new int[]{20}, false),

    /**
     * Here <tt>{@link #bitLevels()}={20}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_20_INTERPOLATED(new int[]{20}, true),

    /**
     * Here <tt>{@link #bitLevels()}={10, 20}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_20_PER_10(new int[]{10, 20}, false),

    /**
     * Here <tt>{@link #bitLevels()}={10, 20}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_20_PER_10_INTERPOLATED(new int[]{10, 20}, true),

    /**
     * Here <tt>{@link #bitLevels()}={6, 13, 20}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_20_PER_7(new int[]{6, 13, 20}, false),

    /**
     * Here <tt>{@link #bitLevels()}={6, 13, 20}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_20_PER_7_INTERPOLATED(new int[]{6, 13, 20}, true),

    /**
     * Here <tt>{@link #bitLevels()}={5, 10, 15, 20}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_20_PER_5(new int[]{5, 10, 15, 20}, false),

    /**
     * Here <tt>{@link #bitLevels()}={5, 10, 15, 20}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_20_PER_5_INTERPOLATED(new int[]{5, 10, 15, 20}, true),

    /**
     * Here <tt>{@link #bitLevels()}={22}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_22(new int[]{22}, false),

    /**
     * Here <tt>{@link #bitLevels()}={22}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_22_INTERPOLATED(new int[]{22}, true),

    /**
     * Here <tt>{@link #bitLevels()}={11, 22}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_22_PER_11(new int[]{11, 22}, false),

    /**
     * Here <tt>{@link #bitLevels()}={11, 22}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_22_PER_11_INTERPOLATED(new int[]{11, 22}, true),

    /**
     * Here <tt>{@link #bitLevels()}={7, 14, 22}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_22_PER_7(new int[]{7, 14, 22}, false),

    /**
     * Here <tt>{@link #bitLevels()}={7, 14, 22}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_22_PER_7_INTERPOLATED(new int[]{7, 14, 22}, true),

    /**
     * Here <tt>{@link #bitLevels()}={5, 10, 15, 22}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_22_PER_5(new int[]{5, 10, 15, 22}, false),

    /**
     * Here <tt>{@link #bitLevels()}={5, 10, 15, 22}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_22_PER_5_INTERPOLATED(new int[]{5, 10, 15, 22}, true),

    /**
     * Here <tt>{@link #bitLevels()}={24}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_24(new int[]{24}, false),

    /**
     * Here <tt>{@link #bitLevels()}={24}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_24_INTERPOLATED(new int[]{24}, true),

    /**
     * Here <tt>{@link #bitLevels()}={12, 24}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_24_PER_12(new int[]{12, 24}, false),

    /**
     * Here <tt>{@link #bitLevels()}={12, 24}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_24_PER_12_INTERPOLATED(new int[]{12, 24}, true),

    /**
     * Here <tt>{@link #bitLevels()}={8, 16, 24}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_24_PER_8(new int[]{8, 16, 24}, false),

    /**
     * Here <tt>{@link #bitLevels()}={8, 16, 24}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_24_PER_8_INTERPOLATED(new int[]{8, 16, 24}, true),

    /**
     * Here <tt>{@link #bitLevels()}={6, 12, 18, 24}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_24_PER_6(new int[]{6, 12, 18, 24}, false),

    /**
     * Here <tt>{@link #bitLevels()}={6, 12, 18, 24}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_24_PER_6_INTERPOLATED(new int[]{6, 12, 18, 24}, true),

    /**
     * Here <tt>{@link #bitLevels()}={4, 8, 12, 16, 20, 24}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_24_PER_4(new int[]{4, 8, 12, 16, 20, 24}, false),

    /**
     * Here <tt>{@link #bitLevels()}={4, 8, 12, 16, 20, 24}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_24_PER_4_INTERPOLATED(new int[]{4, 8, 12, 16, 20, 24}, true),

    /**
     * Here <tt>{@link #bitLevels()}={26}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_26(new int[]{26}, false),

    /**
     * Here <tt>{@link #bitLevels()}={26}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_26_INTERPOLATED(new int[]{26}, true),

    /**
     * Here <tt>{@link #bitLevels()}={13, 26}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_26_PER_13(new int[]{13, 26}, false),

    /**
     * Here <tt>{@link #bitLevels()}={13, 26}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_26_PER_13_INTERPOLATED(new int[]{13, 26}, true),

    /**
     * Here <tt>{@link #bitLevels()}={8, 16, 26}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_26_PER_8(new int[]{8, 16, 26}, false),

    /**
     * Here <tt>{@link #bitLevels()}={8, 16, 26}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_26_PER_8_INTERPOLATED(new int[]{8, 16, 26}, true),

    /**
     * Here <tt>{@link #bitLevels()}={6, 12, 18, 26}</tt>, <tt>{@link #interpolated()}=false</tt>.
     */
    BITS_26_PER_6(new int[]{6, 12, 18, 26}, false),

    /**
     * Here <tt>{@link #bitLevels()}={6, 12, 18, 26}</tt>, <tt>{@link #interpolated()}=true</tt>.
     */
    BITS_26_PER_6_INTERPOLATED(new int[]{6, 12, 18, 26}, true);
    /*Repeat.AutoGeneratedEnd*/

    final int[] bitLevels;
    final boolean interpolated;

    private RankPrecision(int[] bitLevels, boolean interpolated) {
        assert bitLevels.length > 0;
        this.bitLevels = bitLevels;
        this.interpolated = interpolated;
    }

    public int[] bitLevels() {
        return bitLevels.clone();
    }

    public int numberOfAnalyzedBits() {
        return bitLevels[bitLevels.length - 1];
    }

    public boolean interpolated() {
        return interpolated;
    }



    /**
     * Returns the enum instance with the same {@link #bitLevels() bit levels} and with the specified
     * "{@link #interpolated() interpolated}" flag.
     *
     * <p>If the argument is equal to the current result of {@link #interpolated()} method,
     * returns the reference to this instance.
     *
     * @param interpolated new "interpolated" flag.
     * @return             the instance of this enum with the same {@link #bitLevels() bit levels} and
     *                     the specified "{@link #interpolated() interpolated}" flag.
     */
    public RankPrecision otherInterpolation(boolean interpolated) {
        if (interpolated == this.interpolated) {
            return this;
        }
        for (RankPrecision rp : values()) {
            if (java.util.Arrays.equals(rp.bitLevels, this.bitLevels) && rp.interpolated == interpolated) {
                return rp;
            }
        }
        throw new InternalError("Illegal set of constants in " + getClass() + ": "
            + this + " has no partner with another interpolation flag \"" + interpolated + "\"");
    }
}
