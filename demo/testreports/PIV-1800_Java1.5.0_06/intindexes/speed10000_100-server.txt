*** ITERATION #1

Creating vectors (array-based vector int[10000], @291aff, capacity 21870; array-based vector int[10000], @ab95e6, capacity 10000):
0.783343 sec from 0 capacity, 0.012239 sec from 10000 elements
Creating vector (array-based vector int[10000], @fe64b9, capacity 10000) from 0 via length/setInt:
0.028397 sec
Trimming the last vector: 0.000189 sec

1st vector: array-based vector int[10000], @291aff, capacity 21870
2nd vector: array-based vector int[10000], @ab95e6, capacity 10000
3rd vector: array-based vector int[10000], @fe64b9, capacity 10000
Sum of 1st vector: 704532704 (5.3341184E7 ns, 53.34 ns/element)
Sum of 2nd vector: 704532704 (3.0901248E7 ns, 30.90 ns/element)
Sum of 3rd vector: 704532704 (2.4112128E7 ns, 24.11 ns/element)
Sum of 1st vector via array():    704532704 (6.142848E8 ns, 614.28 ns/element)
Sum of 1st vector via toArray():  704532704 (3496960.0 ns, 3.50 ns/element)
Sum of 1st vector via getIntTest: 704532704 (3.8446592E7 ns, 38.45 ns/element)

Filling 1st vector by 0 via asIntArray (3794688.0 ns, 3.79 ns/element)
Filling 2nd vector by 0 (5.3412096E7 ns, 53.41 ns/element)
Creating 3rd vector by 0 via valueOf (9.1638016E7 ns, 91.64 ns/element)
1st vector: array-based vector int[10000], @291aff, capacity 10000
2nd vector: array-based vector int[10000], @ab95e6, capacity 10000
3rd vector: array-based vector int[10000], @1df073d, capacity 10000
Sum of 1st vector: 0 (2.7797248E7 ns, 27.80 ns/element)
Sum of 2nd vector: 0 (2.2705152E7 ns, 22.71 ns/element)
Sum of 3rd vector: 0 (2.381568E7 ns, 23.82 ns/element)
Sum of 1st vector via array():    0 (4582400.0 ns, 4.58 ns/element)
Sum of 1st vector via toArray():  0 (2679552.0 ns, 2.68 ns/element)
Sum of 1st vector via getIntTest: 0 (2.5713152E7 ns, 25.71 ns/element)

Filling 1st vector by 1 via asIntArray (3506688.0 ns, 3.51 ns/element)
Filling 2nd vector by 1 (3.6909824E7 ns, 36.91 ns/element)
Creating 3rd vector by 1 via valueOf (1.22852096E8 ns, 122.85 ns/element)
1st vector: array-based vector int[10000], @291aff, capacity 10000
2nd vector: array-based vector int[10000], @ab95e6, capacity 10000
3rd vector: array-based vector int[10000], @1abab88, capacity 10000
Sum of 1st vector: 1000000 (2.2804224E7 ns, 22.80 ns/element)
Sum of 2nd vector: 1000000 (2.2843392E7 ns, 22.84 ns/element)
Sum of 3rd vector: 1000000 (2.3218176E7 ns, 23.22 ns/element)
Sum of 1st vector via array():    1000000 (4620032.0 ns, 4.62 ns/element)
Sum of 1st vector via toArray():  1000000 (2762752.0 ns, 2.76 ns/element)
Sum of 1st vector via getIntTest: 1000000 (2.5549056E7 ns, 25.55 ns/element)

Filling 1st vector by 2 via asIntArray (3459072.0 ns, 3.46 ns/element)
Filling 2nd vector by 2 (3.7094144E7 ns, 37.09 ns/element)
Creating 3rd vector by 2 via valueOf (1.1196928E8 ns, 111.97 ns/element)

Extracting sub-vectors

1st vector: array-based subvector int[5000], @291aff, capacity 5000, start offset = 2500
2nd vector: array-based subvector int[5000], @ab95e6, capacity 5000, start offset = 2500
3rd vector: array-based subvector int[5000], @1c39a2d, capacity 5000, start offset = 2500
Sum of 1st vector: 1000000 (1.7332224E7 ns, 34.66 ns/element)
Sum of 2nd vector: 1000000 (1.1875072E7 ns, 23.75 ns/element)
Sum of 3rd vector: 1000000 (1.1750912E7 ns, 23.50 ns/element)
Sum of 1st vector via array():    1000000 (2368000.0 ns, 4.74 ns/element)
Sum of 1st vector via toArray():  1000000 (1391616.0 ns, 2.78 ns/element)
Sum of 1st vector via getIntTest: 1000000 (1.2236288E7 ns, 24.47 ns/element)

Filling 1st vector by 3 via asIntArray (1852672.0 ns, 3.71 ns/element)
Filling 2nd vector by 3 (2.2441216E7 ns, 44.88 ns/element)
Creating 3rd vector by 3 via valueOf (5.8884352E7 ns, 117.77 ns/element)
1st vector: array-based subvector int[5000], @291aff, capacity 5000, start offset = 2500
2nd vector: array-based subvector int[5000], @ab95e6, capacity 5000, start offset = 2500
3rd vector: array-based vector int[5000], @bf2d5e, capacity 5000
Sum of 1st vector: 1500000 (1.2123392E7 ns, 24.25 ns/element)
Sum of 2nd vector: 1500000 (1.216896E7 ns, 24.34 ns/element)
Sum of 3rd vector: 1500000 (2.3154688E7 ns, 46.31 ns/element)
Sum of 1st vector via array():    1500000 (1.0852352E7 ns, 21.70 ns/element)
Sum of 1st vector via toArray():  1500000 (9973248.0 ns, 19.95 ns/element)
Sum of 1st vector via getIntTest: 1500000 (1.2663296E7 ns, 25.33 ns/element)

Filling 1st vector by 4 via asIntArray (1804288.0 ns, 3.61 ns/element)
Filling 2nd vector by 4 (1.6962048E7 ns, 33.92 ns/element)
Creating 3rd vector by 4 via valueOf (5.488512E7 ns, 109.77 ns/element)
1st vector: array-based subvector int[5000], @291aff, capacity 5000, start offset = 2500
2nd vector: array-based subvector int[5000], @ab95e6, capacity 5000, start offset = 2500
3rd vector: array-based vector int[5000], @13bad12, capacity 5000
Sum of 1st vector: 2000000 (1.2221696E7 ns, 24.44 ns/element)
Sum of 2nd vector: 2000000 (1.2006144E7 ns, 24.01 ns/element)
Sum of 3rd vector: 2000000 (1.2121856E7 ns, 24.24 ns/element)
Sum of 1st vector via array():    2000000 (2409216.0 ns, 4.82 ns/element)
Sum of 1st vector via toArray():  2000000 (3615744.0 ns, 7.23 ns/element)
Sum of 1st vector via getIntTest: 2000000 (1.2650496E7 ns, 25.30 ns/element)

Filling 1st vector by 5 via asIntArray (1786368.0 ns, 3.57 ns/element)
Filling 2nd vector by 5 (1.6781056E7 ns, 33.56 ns/element)
Creating 3rd vector by 5 via valueOf (5.5297536E7 ns, 110.60 ns/element)

*** ITERATION #2

Creating vectors (array-based vector int[5000], @df8ff1, capacity 7290; array-based vector int[5000], @1632c2d, capacity 5000):
0.003599 sec from 0 capacity, 0.000273 sec from 5000 elements
Creating vector (array-based vector int[5000], @1e97676, capacity 5000) from 0 via length/setInt:
0.001676 sec
Trimming the last vector: 0.000142 sec

1st vector: array-based vector int[5000], @df8ff1, capacity 7290
2nd vector: array-based vector int[5000], @1632c2d, capacity 5000
3rd vector: array-based vector int[5000], @1e97676, capacity 5000
Sum of 1st vector: 1249750000 (1.6889856E7 ns, 33.78 ns/element)
Sum of 2nd vector: 1249750000 (1.1252224E7 ns, 22.50 ns/element)
Sum of 3rd vector: 1249750000 (1.1771904E7 ns, 23.54 ns/element)
Sum of 1st vector via array():    1249750000 (2472192.0 ns, 4.94 ns/element)
Sum of 1st vector via toArray():  1249750000 (1275136.0 ns, 2.55 ns/element)
Sum of 1st vector via getIntTest: 1249750000 (1.2695296E7 ns, 25.39 ns/element)

Filling 1st vector by 0 via asIntArray (1762816.0 ns, 3.53 ns/element)
Filling 2nd vector by 0 (1.76768E7 ns, 35.35 ns/element)
Creating 3rd vector by 0 via valueOf (5.7364736E7 ns, 114.73 ns/element)
1st vector: array-based vector int[5000], @df8ff1, capacity 5000
2nd vector: array-based vector int[5000], @1632c2d, capacity 5000
3rd vector: array-based vector int[5000], @60420f, capacity 5000
Sum of 1st vector: 0 (1.1469824E7 ns, 22.94 ns/element)
Sum of 2nd vector: 0 (1.1537664E7 ns, 23.08 ns/element)
Sum of 3rd vector: 0 (1.1277568E7 ns, 22.56 ns/element)
Sum of 1st vector via array():    0 (2279168.0 ns, 4.56 ns/element)
Sum of 1st vector via toArray():  0 (1243904.0 ns, 2.49 ns/element)
Sum of 1st vector via getIntTest: 0 (1.2313344E7 ns, 24.63 ns/element)

Filling 1st vector by 1 via asIntArray (1810688.0 ns, 3.62 ns/element)
Filling 2nd vector by 1 (1.7979648E7 ns, 35.96 ns/element)
Creating 3rd vector by 1 via valueOf (5.7105664E7 ns, 114.21 ns/element)
1st vector: array-based vector int[5000], @df8ff1, capacity 5000
2nd vector: array-based vector int[5000], @1632c2d, capacity 5000
3rd vector: array-based vector int[5000], @19106c7, capacity 5000
Sum of 1st vector: 500000 (1.160704E7 ns, 23.21 ns/element)
Sum of 2nd vector: 500000 (1.1139328E7 ns, 22.28 ns/element)
Sum of 3rd vector: 500000 (1.1471616E7 ns, 22.94 ns/element)
Sum of 1st vector via array():    500000 (2269952.0 ns, 4.54 ns/element)
Sum of 1st vector via toArray():  500000 (1355776.0 ns, 2.71 ns/element)
Sum of 1st vector via getIntTest: 500000 (1.2694272E7 ns, 25.39 ns/element)

Filling 1st vector by 2 via asIntArray (1816064.0 ns, 3.63 ns/element)
Filling 2nd vector by 2 (1.7818624E7 ns, 35.64 ns/element)
Creating 3rd vector by 2 via valueOf (5.4733312E7 ns, 109.47 ns/element)

Extracting sub-vectors

1st vector: array-based subvector int[2500], @df8ff1, capacity 2500, start offset = 1250
2nd vector: array-based subvector int[2500], @1632c2d, capacity 2500, start offset = 1250
3rd vector: array-based subvector int[2500], @540408, capacity 2500, start offset = 1250
Sum of 1st vector: 500000 (5886976.0 ns, 23.55 ns/element)
Sum of 2nd vector: 500000 (6009088.0 ns, 24.04 ns/element)
Sum of 3rd vector: 500000 (5900544.0 ns, 23.60 ns/element)
Sum of 1st vector via array():    500000 (1141504.0 ns, 4.57 ns/element)
Sum of 1st vector via toArray():  500000 (619264.0 ns, 2.48 ns/element)
Sum of 1st vector via getIntTest: 500000 (6394112.0 ns, 25.58 ns/element)

Filling 1st vector by 3 via asIntArray (886272.0 ns, 3.55 ns/element)
Filling 2nd vector by 3 (8816896.0 ns, 35.27 ns/element)
Creating 3rd vector by 3 via valueOf (2.9645312E7 ns, 118.58 ns/element)
1st vector: array-based subvector int[2500], @df8ff1, capacity 2500, start offset = 1250
2nd vector: array-based subvector int[2500], @1632c2d, capacity 2500, start offset = 1250
3rd vector: array-based vector int[2500], @1d4c61c, capacity 2500
Sum of 1st vector: 750000 (7153920.0 ns, 28.62 ns/element)
Sum of 2nd vector: 750000 (6201088.0 ns, 24.80 ns/element)
Sum of 3rd vector: 750000 (9855744.0 ns, 39.42 ns/element)
Sum of 1st vector via array():    750000 (1142528.0 ns, 4.57 ns/element)
Sum of 1st vector via toArray():  750000 (591872.0 ns, 2.37 ns/element)
Sum of 1st vector via getIntTest: 750000 (6359808.0 ns, 25.44 ns/element)

Filling 1st vector by 4 via asIntArray (909056.0 ns, 3.64 ns/element)
Filling 2nd vector by 4 (9692160.0 ns, 38.77 ns/element)
Creating 3rd vector by 4 via valueOf (2.9330432E7 ns, 117.32 ns/element)
1st vector: array-based subvector int[2500], @df8ff1, capacity 2500, start offset = 1250
2nd vector: array-based subvector int[2500], @1632c2d, capacity 2500, start offset = 1250
3rd vector: array-based vector int[2500], @1a626f, capacity 2500
Sum of 1st vector: 1000000 (6095616.0 ns, 24.38 ns/element)
Sum of 2nd vector: 1000000 (6129920.0 ns, 24.52 ns/element)
Sum of 3rd vector: 1000000 (9813504.0 ns, 39.25 ns/element)
Sum of 1st vector via array():    1000000 (1142528.0 ns, 4.57 ns/element)
Sum of 1st vector via toArray():  1000000 (607232.0 ns, 2.43 ns/element)
Sum of 1st vector via getIntTest: 1000000 (6166016.0 ns, 24.66 ns/element)

Filling 1st vector by 5 via asIntArray (899072.0 ns, 3.60 ns/element)
Filling 2nd vector by 5 (9283840.0 ns, 37.14 ns/element)
Creating 3rd vector by 5 via valueOf (2.9197056E7 ns, 116.79 ns/element)

*** ITERATION #3

Creating vectors (array-based vector int[2500], @34a1fc, capacity 7290; array-based vector int[2500], @176c74b, capacity 2500):
0.000152 sec from 0 capacity, 0.000052 sec from 2500 elements
Creating vector (array-based vector int[2500], @116471f, capacity 2500) from 0 via length/setInt:
0.000400 sec
Trimming the last vector: 0.000032 sec

1st vector: array-based vector int[2500], @34a1fc, capacity 7290
2nd vector: array-based vector int[2500], @176c74b, capacity 2500
3rd vector: array-based vector int[2500], @116471f, capacity 2500
Sum of 1st vector: 312375000 (5604608.0 ns, 22.42 ns/element)
Sum of 2nd vector: 312375000 (5621760.0 ns, 22.49 ns/element)
Sum of 3rd vector: 312375000 (5611264.0 ns, 22.45 ns/element)
Sum of 1st vector via array():    312375000 (1367808.0 ns, 5.47 ns/element)
Sum of 1st vector via toArray():  312375000 (595200.0 ns, 2.38 ns/element)
Sum of 1st vector via getIntTest: 312375000 (6299648.0 ns, 25.20 ns/element)

Filling 1st vector by 0 via asIntArray (902656.0 ns, 3.61 ns/element)
Filling 2nd vector by 0 (9079040.0 ns, 36.32 ns/element)
Creating 3rd vector by 0 via valueOf (3.0170112E7 ns, 120.68 ns/element)
1st vector: array-based vector int[2500], @34a1fc, capacity 2500
2nd vector: array-based vector int[2500], @176c74b, capacity 2500
3rd vector: array-based vector int[2500], @1975b59, capacity 2500
Sum of 1st vector: 0 (5551616.0 ns, 22.21 ns/element)
Sum of 2nd vector: 0 (5728000.0 ns, 22.91 ns/element)
Sum of 3rd vector: 0 (5626624.0 ns, 22.51 ns/element)
Sum of 1st vector via array():    0 (1150720.0 ns, 4.60 ns/element)
Sum of 1st vector via toArray():  0 (590592.0 ns, 2.36 ns/element)
Sum of 1st vector via getIntTest: 0 (6323456.0 ns, 25.29 ns/element)

Filling 1st vector by 1 via asIntArray (1043456.0 ns, 4.17 ns/element)
Filling 2nd vector by 1 (9278976.0 ns, 37.12 ns/element)
Creating 3rd vector by 1 via valueOf (2.956032E7 ns, 118.24 ns/element)
1st vector: array-based vector int[2500], @34a1fc, capacity 2500
2nd vector: array-based vector int[2500], @176c74b, capacity 2500
3rd vector: array-based vector int[2500], @1ee3914, capacity 2500
Sum of 1st vector: 250000 (5552128.0 ns, 22.21 ns/element)
Sum of 2nd vector: 250000 (5619712.0 ns, 22.48 ns/element)
Sum of 3rd vector: 250000 (5629184.0 ns, 22.52 ns/element)
Sum of 1st vector via array():    250000 (1149440.0 ns, 4.60 ns/element)
Sum of 1st vector via toArray():  250000 (8347136.0 ns, 33.39 ns/element)
Sum of 1st vector via getIntTest: 250000 (1.5429376E7 ns, 61.72 ns/element)

Filling 1st vector by 2 via asIntArray (969216.0 ns, 3.88 ns/element)
Filling 2nd vector by 2 (9084160.0 ns, 36.34 ns/element)
Creating 3rd vector by 2 via valueOf (2.9341952E7 ns, 117.37 ns/element)

Extracting sub-vectors

1st vector: array-based subvector int[1250], @34a1fc, capacity 1250, start offset = 625
2nd vector: array-based subvector int[1250], @176c74b, capacity 1250, start offset = 625
3rd vector: array-based subvector int[1250], @e5855a, capacity 1250, start offset = 625
Sum of 1st vector: 250000 (3006720.0 ns, 24.05 ns/element)
Sum of 2nd vector: 250000 (3094528.0 ns, 24.76 ns/element)
Sum of 3rd vector: 250000 (2950400.0 ns, 23.60 ns/element)
Sum of 1st vector via array():    250000 (583168.0 ns, 4.67 ns/element)
Sum of 1st vector via toArray():  250000 (305408.0 ns, 2.44 ns/element)
Sum of 1st vector via getIntTest: 250000 (3133440.0 ns, 25.07 ns/element)

Filling 1st vector by 3 via asIntArray (469760.0 ns, 3.76 ns/element)
Filling 2nd vector by 3 (4403456.0 ns, 35.23 ns/element)
Creating 3rd vector by 3 via valueOf (2.5458944E7 ns, 203.67 ns/element)
1st vector: array-based subvector int[1250], @34a1fc, capacity 1250, start offset = 625
2nd vector: array-based subvector int[1250], @176c74b, capacity 1250, start offset = 625
3rd vector: array-based vector int[1250], @95fd19, capacity 1250
Sum of 1st vector: 375000 (3075328.0 ns, 24.60 ns/element)
Sum of 2nd vector: 375000 (2996992.0 ns, 23.98 ns/element)
Sum of 3rd vector: 375000 (2830080.0 ns, 22.64 ns/element)
Sum of 1st vector via array():    375000 (578560.0 ns, 4.63 ns/element)
Sum of 1st vector via toArray():  375000 (320256.0 ns, 2.56 ns/element)
Sum of 1st vector via getIntTest: 375000 (3110144.0 ns, 24.88 ns/element)

Filling 1st vector by 4 via asIntArray (463872.0 ns, 3.71 ns/element)
Filling 2nd vector by 4 (4460288.0 ns, 35.68 ns/element)
Creating 3rd vector by 4 via valueOf (5340160.0 ns, 42.72 ns/element)
1st vector: array-based subvector int[1250], @34a1fc, capacity 1250, start offset = 625
2nd vector: array-based subvector int[1250], @176c74b, capacity 1250, start offset = 625
3rd vector: array-based vector int[1250], @11b9fb1, capacity 1250
Sum of 1st vector: 500000 (3966720.0 ns, 31.73 ns/element)
Sum of 2nd vector: 500000 (2916864.0 ns, 23.33 ns/element)
Sum of 3rd vector: 500000 (2828800.0 ns, 22.63 ns/element)
Sum of 1st vector via array():    500000 (581632.0 ns, 4.65 ns/element)
Sum of 1st vector via toArray():  500000 (337152.0 ns, 2.70 ns/element)
Sum of 1st vector via getIntTest: 500000 (2938624.0 ns, 23.51 ns/element)

Filling 1st vector by 5 via asIntArray (469248.0 ns, 3.75 ns/element)
Filling 2nd vector by 5 (4586496.0 ns, 36.69 ns/element)
Creating 3rd vector by 5 via valueOf (2.5871872E7 ns, 206.97 ns/element)

