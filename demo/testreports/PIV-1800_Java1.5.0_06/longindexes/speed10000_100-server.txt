*** ITERATION #1

Creating vectors (array-based vector int[10000], @ab95e6, capacity 21870; array-based vector int[10000], @fe64b9, capacity 10000):
0.794006 sec from 0 capacity, 0.013699 sec from 10000 elements
Creating vector (array-based vector int[10000], @186db54, capacity 10000) from 0 via length/setInt:
0.058349 sec
Trimming the last vector: 0.000189 sec

1st vector: array-based vector int[10000], @ab95e6, capacity 21870
2nd vector: array-based vector int[10000], @fe64b9, capacity 10000
3rd vector: array-based vector int[10000], @186db54, capacity 10000
Sum of 1st vector: 704532704 (4.6135296E7 ns, 46.14 ns/element)
Sum of 2nd vector: 704532704 (3.1578368E7 ns, 31.58 ns/element)
Sum of 3rd vector: 704532704 (3.0959104E7 ns, 30.96 ns/element)
Sum of 1st vector via array():    704532704 (8.05311488E8 ns, 805.31 ns/element)
Sum of 1st vector via toArray():  704532704 (3160320.0 ns, 3.16 ns/element)
Sum of 1st vector via getIntTest: 704532704 (2.9029888E7 ns, 29.03 ns/element)

Filling 1st vector by 0 via asIntArray (4511232.0 ns, 4.51 ns/element)
Filling 2nd vector by 0 (7.1329792E7 ns, 71.33 ns/element)
Creating 3rd vector by 0 via valueOf (8.9237248E7 ns, 89.24 ns/element)
1st vector: array-based vector int[10000], @ab95e6, capacity 10000
2nd vector: array-based vector int[10000], @fe64b9, capacity 10000
3rd vector: array-based vector int[10000], @1546e25, capacity 10000
Sum of 1st vector: 0 (3.2902912E7 ns, 32.90 ns/element)
Sum of 2nd vector: 0 (2.8865024E7 ns, 28.87 ns/element)
Sum of 3rd vector: 0 (2.9057024E7 ns, 29.06 ns/element)
Sum of 1st vector via array():    0 (5327872.0 ns, 5.33 ns/element)
Sum of 1st vector via toArray():  0 (2590208.0 ns, 2.59 ns/element)
Sum of 1st vector via getIntTest: 0 (2.4694016E7 ns, 24.69 ns/element)

Filling 1st vector by 1 via asIntArray (3461376.0 ns, 3.46 ns/element)
Filling 2nd vector by 1 (4.6688512E7 ns, 46.69 ns/element)
Creating 3rd vector by 1 via valueOf (1.18833664E8 ns, 118.83 ns/element)
1st vector: array-based vector int[10000], @ab95e6, capacity 10000
2nd vector: array-based vector int[10000], @fe64b9, capacity 10000
3rd vector: array-based vector int[10000], @18a7efd, capacity 10000
Sum of 1st vector: 1000000 (2.9007104E7 ns, 29.01 ns/element)
Sum of 2nd vector: 1000000 (2.8419328E7 ns, 28.42 ns/element)
Sum of 3rd vector: 1000000 (2.8797952E7 ns, 28.80 ns/element)
Sum of 1st vector via array():    1000000 (6387712.0 ns, 6.39 ns/element)
Sum of 1st vector via toArray():  1000000 (2459648.0 ns, 2.46 ns/element)
Sum of 1st vector via getIntTest: 1000000 (2.4384768E7 ns, 24.38 ns/element)

Filling 1st vector by 2 via asIntArray (3485696.0 ns, 3.49 ns/element)
Filling 2nd vector by 2 (4.6769408E7 ns, 46.77 ns/element)
Creating 3rd vector by 2 via valueOf (1.08649472E8 ns, 108.65 ns/element)

Extracting sub-vectors

1st vector: array-based subvector int[5000], @ab95e6, capacity 5000, start offset = 2500
2nd vector: array-based subvector int[5000], @fe64b9, capacity 5000, start offset = 2500
3rd vector: array-based subvector int[5000], @bf2d5e, capacity 5000, start offset = 2500
Sum of 1st vector: 1000000 (2.1187072E7 ns, 42.37 ns/element)
Sum of 2nd vector: 1000000 (1.568256E7 ns, 31.37 ns/element)
Sum of 3rd vector: 1000000 (1.5097344E7 ns, 30.19 ns/element)
Sum of 1st vector via array():    1000000 (3345408.0 ns, 6.69 ns/element)
Sum of 1st vector via toArray():  1000000 (1355520.0 ns, 2.71 ns/element)
Sum of 1st vector via getIntTest: 1000000 (1.2170752E7 ns, 24.34 ns/element)

Filling 1st vector by 3 via asIntArray (1834496.0 ns, 3.67 ns/element)
Filling 2nd vector by 3 (3.2819968E7 ns, 65.64 ns/element)
Creating 3rd vector by 3 via valueOf (6.1971968E7 ns, 123.94 ns/element)
1st vector: array-based subvector int[5000], @ab95e6, capacity 5000, start offset = 2500
2nd vector: array-based subvector int[5000], @fe64b9, capacity 5000, start offset = 2500
3rd vector: array-based vector int[5000], @13bad12, capacity 5000
Sum of 1st vector: 1500000 (1.5789824E7 ns, 31.58 ns/element)
Sum of 2nd vector: 1500000 (3.276416E7 ns, 65.53 ns/element)
Sum of 3rd vector: 1500000 (1.4875392E7 ns, 29.75 ns/element)
Sum of 1st vector via array():    1500000 (2287616.0 ns, 4.58 ns/element)
Sum of 1st vector via toArray():  1500000 (1206528.0 ns, 2.41 ns/element)
Sum of 1st vector via getIntTest: 1500000 (1.2021504E7 ns, 24.04 ns/element)

Filling 1st vector by 4 via asIntArray (1832960.0 ns, 3.67 ns/element)
Filling 2nd vector by 4 (2.59072E7 ns, 51.81 ns/element)
Creating 3rd vector by 4 via valueOf (5.6384512E7 ns, 112.77 ns/element)
1st vector: array-based subvector int[5000], @ab95e6, capacity 5000, start offset = 2500
2nd vector: array-based subvector int[5000], @fe64b9, capacity 5000, start offset = 2500
3rd vector: array-based vector int[5000], @df8ff1, capacity 5000
Sum of 1st vector: 2000000 (1.9175936E7 ns, 38.35 ns/element)
Sum of 2nd vector: 2000000 (1.5308288E7 ns, 30.62 ns/element)
Sum of 3rd vector: 2000000 (1.4208E7 ns, 28.42 ns/element)
Sum of 1st vector via array():    2000000 (2411776.0 ns, 4.82 ns/element)
Sum of 1st vector via toArray():  2000000 (1208832.0 ns, 2.42 ns/element)
Sum of 1st vector via getIntTest: 2000000 (1.18336E7 ns, 23.67 ns/element)

Filling 1st vector by 5 via asIntArray (1918464.0 ns, 3.84 ns/element)
Filling 2nd vector by 5 (2.5929472E7 ns, 51.86 ns/element)
Creating 3rd vector by 5 via valueOf (5.6837632E7 ns, 113.68 ns/element)

*** ITERATION #2

Creating vectors (array-based vector int[5000], @1632c2d, capacity 7290; array-based vector int[5000], @1e97676, capacity 5000):
0.000353 sec from 0 capacity, 0.000213 sec from 5000 elements
Creating vector (array-based vector int[5000], @60420f, capacity 5000) from 0 via length/setInt:
0.002427 sec
Trimming the last vector: 0.000148 sec

1st vector: array-based vector int[5000], @1632c2d, capacity 7290
2nd vector: array-based vector int[5000], @1e97676, capacity 5000
3rd vector: array-based vector int[5000], @60420f, capacity 5000
Sum of 1st vector: 1249750000 (1.515392E7 ns, 30.31 ns/element)
Sum of 2nd vector: 1249750000 (1.4697984E7 ns, 29.40 ns/element)
Sum of 3rd vector: 1249750000 (1.4978816E7 ns, 29.96 ns/element)
Sum of 1st vector via array():    1249750000 (2280704.0 ns, 4.56 ns/element)
Sum of 1st vector via toArray():  1249750000 (1264384.0 ns, 2.53 ns/element)
Sum of 1st vector via getIntTest: 1249750000 (1.2238592E7 ns, 24.48 ns/element)

Filling 1st vector by 0 via asIntArray (1755648.0 ns, 3.51 ns/element)
Filling 2nd vector by 0 (2.6518272E7 ns, 53.04 ns/element)
Creating 3rd vector by 0 via valueOf (5.5760384E7 ns, 111.52 ns/element)
1st vector: array-based vector int[5000], @1632c2d, capacity 5000
2nd vector: array-based vector int[5000], @1e97676, capacity 5000
3rd vector: array-based vector int[5000], @19106c7, capacity 5000
Sum of 1st vector: 0 (1.4662656E7 ns, 29.33 ns/element)
Sum of 2nd vector: 0 (1.4559232E7 ns, 29.12 ns/element)
Sum of 3rd vector: 0 (1.4519296E7 ns, 29.04 ns/element)
Sum of 1st vector via array():    0 (2399744.0 ns, 4.80 ns/element)
Sum of 1st vector via toArray():  0 (1206528.0 ns, 2.41 ns/element)
Sum of 1st vector via getIntTest: 0 (1.2160768E7 ns, 24.32 ns/element)

Filling 1st vector by 1 via asIntArray (1800704.0 ns, 3.60 ns/element)
Filling 2nd vector by 1 (2.6518528E7 ns, 53.04 ns/element)
Creating 3rd vector by 1 via valueOf (5.5507456E7 ns, 111.01 ns/element)
1st vector: array-based vector int[5000], @1632c2d, capacity 5000
2nd vector: array-based vector int[5000], @1e97676, capacity 5000
3rd vector: array-based vector int[5000], @540408, capacity 5000
Sum of 1st vector: 500000 (1.4829056E7 ns, 29.66 ns/element)
Sum of 2nd vector: 500000 (1.5318272E7 ns, 30.64 ns/element)
Sum of 3rd vector: 500000 (1.4598144E7 ns, 29.20 ns/element)
Sum of 1st vector via array():    500000 (2717952.0 ns, 5.44 ns/element)
Sum of 1st vector via toArray():  500000 (1185024.0 ns, 2.37 ns/element)
Sum of 1st vector via getIntTest: 500000 (1.2418304E7 ns, 24.84 ns/element)

Filling 1st vector by 2 via asIntArray (1791744.0 ns, 3.58 ns/element)
Filling 2nd vector by 2 (2.6420224E7 ns, 52.84 ns/element)
Creating 3rd vector by 2 via valueOf (5.5506432E7 ns, 111.01 ns/element)

Extracting sub-vectors

1st vector: array-based subvector int[2500], @1632c2d, capacity 2500, start offset = 1250
2nd vector: array-based subvector int[2500], @1e97676, capacity 2500, start offset = 1250
3rd vector: array-based subvector int[2500], @1d4c61c, capacity 2500, start offset = 1250
Sum of 1st vector: 500000 (7756800.0 ns, 31.03 ns/element)
Sum of 2nd vector: 500000 (9232384.0 ns, 36.93 ns/element)
Sum of 3rd vector: 500000 (7670016.0 ns, 30.68 ns/element)
Sum of 1st vector via array():    500000 (1176064.0 ns, 4.70 ns/element)
Sum of 1st vector via toArray():  500000 (616704.0 ns, 2.47 ns/element)
Sum of 1st vector via getIntTest: 500000 (6055424.0 ns, 24.22 ns/element)

Filling 1st vector by 3 via asIntArray (984832.0 ns, 3.94 ns/element)
Filling 2nd vector by 3 (1.3023488E7 ns, 52.09 ns/element)
Creating 3rd vector by 3 via valueOf (2.9108224E7 ns, 116.43 ns/element)
1st vector: array-based subvector int[2500], @1632c2d, capacity 2500, start offset = 1250
2nd vector: array-based subvector int[2500], @1e97676, capacity 2500, start offset = 1250
3rd vector: array-based vector int[2500], @1a626f, capacity 2500
Sum of 1st vector: 750000 (7840000.0 ns, 31.36 ns/element)
Sum of 2nd vector: 750000 (7716864.0 ns, 30.87 ns/element)
Sum of 3rd vector: 750000 (7364096.0 ns, 29.46 ns/element)
Sum of 1st vector via array():    750000 (1240832.0 ns, 4.96 ns/element)
Sum of 1st vector via toArray():  750000 (610304.0 ns, 2.44 ns/element)
Sum of 1st vector via getIntTest: 750000 (6172416.0 ns, 24.69 ns/element)

Filling 1st vector by 4 via asIntArray (951808.0 ns, 3.81 ns/element)
Filling 2nd vector by 4 (1.4233088E7 ns, 56.93 ns/element)
Creating 3rd vector by 4 via valueOf (2.8672512E7 ns, 114.69 ns/element)
1st vector: array-based subvector int[2500], @1632c2d, capacity 2500, start offset = 1250
2nd vector: array-based subvector int[2500], @1e97676, capacity 2500, start offset = 1250
3rd vector: array-based vector int[2500], @34a1fc, capacity 2500
Sum of 1st vector: 1000000 (7779584.0 ns, 31.12 ns/element)
Sum of 2nd vector: 1000000 (7699200.0 ns, 30.80 ns/element)
Sum of 3rd vector: 1000000 (7813632.0 ns, 31.25 ns/element)
Sum of 1st vector via array():    1000000 (1332992.0 ns, 5.33 ns/element)
Sum of 1st vector via toArray():  1000000 (622336.0 ns, 2.49 ns/element)
Sum of 1st vector via getIntTest: 1000000 (6193408.0 ns, 24.77 ns/element)

Filling 1st vector by 5 via asIntArray (966144.0 ns, 3.86 ns/element)
Filling 2nd vector by 5 (1.8546688E7 ns, 74.19 ns/element)
Creating 3rd vector by 5 via valueOf (2.9101568E7 ns, 116.41 ns/element)

*** ITERATION #3

Creating vectors (array-based vector int[2500], @176c74b, capacity 7290; array-based vector int[2500], @116471f, capacity 2500):
0.000204 sec from 0 capacity, 0.000065 sec from 2500 elements
Creating vector (array-based vector int[2500], @1975b59, capacity 2500) from 0 via length/setInt:
0.000445 sec
Trimming the last vector: 0.000030 sec

1st vector: array-based vector int[2500], @176c74b, capacity 7290
2nd vector: array-based vector int[2500], @116471f, capacity 2500
3rd vector: array-based vector int[2500], @1975b59, capacity 2500
Sum of 1st vector: 312375000 (7308288.0 ns, 29.23 ns/element)
Sum of 2nd vector: 312375000 (2.2335744E7 ns, 89.34 ns/element)
Sum of 3rd vector: 312375000 (7063808.0 ns, 28.26 ns/element)
Sum of 1st vector via array():    312375000 (1175296.0 ns, 4.70 ns/element)
Sum of 1st vector via toArray():  312375000 (619008.0 ns, 2.48 ns/element)
Sum of 1st vector via getIntTest: 312375000 (6179328.0 ns, 24.72 ns/element)

Filling 1st vector by 0 via asIntArray (956928.0 ns, 3.83 ns/element)
Filling 2nd vector by 0 (1.318912E7 ns, 52.76 ns/element)
Creating 3rd vector by 0 via valueOf (2.8267776E7 ns, 113.07 ns/element)
1st vector: array-based vector int[2500], @176c74b, capacity 2500
2nd vector: array-based vector int[2500], @116471f, capacity 2500
3rd vector: array-based vector int[2500], @1ee3914, capacity 2500
Sum of 1st vector: 0 (7336192.0 ns, 29.34 ns/element)
Sum of 2nd vector: 0 (7489024.0 ns, 29.96 ns/element)
Sum of 3rd vector: 0 (7437568.0 ns, 29.75 ns/element)
Sum of 1st vector via array():    0 (1399808.0 ns, 5.60 ns/element)
Sum of 1st vector via toArray():  0 (601344.0 ns, 2.41 ns/element)
Sum of 1st vector via getIntTest: 0 (6220288.0 ns, 24.88 ns/element)

Filling 1st vector by 1 via asIntArray (914688.0 ns, 3.66 ns/element)
Filling 2nd vector by 1 (1.7086464E7 ns, 68.35 ns/element)
Creating 3rd vector by 1 via valueOf (2.8930304E7 ns, 115.72 ns/element)
1st vector: array-based vector int[2500], @176c74b, capacity 2500
2nd vector: array-based vector int[2500], @116471f, capacity 2500
3rd vector: array-based vector int[2500], @e5855a, capacity 2500
Sum of 1st vector: 250000 (7453184.0 ns, 29.81 ns/element)
Sum of 2nd vector: 250000 (7489536.0 ns, 29.96 ns/element)
Sum of 3rd vector: 250000 (7178240.0 ns, 28.71 ns/element)
Sum of 1st vector via array():    250000 (1272320.0 ns, 5.09 ns/element)
Sum of 1st vector via toArray():  250000 (607488.0 ns, 2.43 ns/element)
Sum of 1st vector via getIntTest: 250000 (6244096.0 ns, 24.98 ns/element)

Filling 1st vector by 2 via asIntArray (911104.0 ns, 3.64 ns/element)
Filling 2nd vector by 2 (1.3539584E7 ns, 54.16 ns/element)
Creating 3rd vector by 2 via valueOf (2.8592128E7 ns, 114.37 ns/element)

Extracting sub-vectors

1st vector: array-based subvector int[1250], @176c74b, capacity 1250, start offset = 625
2nd vector: array-based subvector int[1250], @116471f, capacity 1250, start offset = 625
3rd vector: array-based subvector int[1250], @95fd19, capacity 1250, start offset = 625
Sum of 1st vector: 250000 (4323328.0 ns, 34.59 ns/element)
Sum of 2nd vector: 250000 (3851008.0 ns, 30.81 ns/element)
Sum of 3rd vector: 250000 (3859968.0 ns, 30.88 ns/element)
Sum of 1st vector via array():    250000 (646656.0 ns, 5.17 ns/element)
Sum of 1st vector via toArray():  250000 (316928.0 ns, 2.54 ns/element)
Sum of 1st vector via getIntTest: 250000 (3016192.0 ns, 24.13 ns/element)

Filling 1st vector by 3 via asIntArray (481024.0 ns, 3.85 ns/element)
Filling 2nd vector by 3 (6756096.0 ns, 54.05 ns/element)
Creating 3rd vector by 3 via valueOf (2.4363008E7 ns, 194.90 ns/element)
1st vector: array-based subvector int[1250], @176c74b, capacity 1250, start offset = 625
2nd vector: array-based subvector int[1250], @116471f, capacity 1250, start offset = 625
3rd vector: array-based vector int[1250], @11b9fb1, capacity 1250
Sum of 1st vector: 375000 (3687680.0 ns, 29.50 ns/element)
Sum of 2nd vector: 375000 (3922432.0 ns, 31.38 ns/element)
Sum of 3rd vector: 375000 (3577088.0 ns, 28.62 ns/element)
Sum of 1st vector via array():    375000 (574464.0 ns, 4.60 ns/element)
Sum of 1st vector via toArray():  375000 (318464.0 ns, 2.55 ns/element)
Sum of 1st vector via getIntTest: 375000 (3152896.0 ns, 25.22 ns/element)

Filling 1st vector by 4 via asIntArray (466432.0 ns, 3.73 ns/element)
Filling 2nd vector by 4 (6520320.0 ns, 52.16 ns/element)
Creating 3rd vector by 4 via valueOf (5446400.0 ns, 43.57 ns/element)
1st vector: array-based subvector int[1250], @176c74b, capacity 1250, start offset = 625
2nd vector: array-based subvector int[1250], @116471f, capacity 1250, start offset = 625
3rd vector: array-based vector int[1250], @913fe2, capacity 1250
Sum of 1st vector: 500000 (3790592.0 ns, 30.32 ns/element)
Sum of 2nd vector: 500000 (4463616.0 ns, 35.71 ns/element)
Sum of 3rd vector: 500000 (3624192.0 ns, 28.99 ns/element)
Sum of 1st vector via array():    500000 (602368.0 ns, 4.82 ns/element)
Sum of 1st vector via toArray():  500000 (308224.0 ns, 2.47 ns/element)
Sum of 1st vector via getIntTest: 500000 (3047424.0 ns, 24.38 ns/element)

Filling 1st vector by 5 via asIntArray (598528.0 ns, 4.79 ns/element)
Filling 2nd vector by 5 (6479104.0 ns, 51.83 ns/element)
Creating 3rd vector by 5 via valueOf (2185472.0 ns, 17.48 ns/element)

