*** ITERATION #1

Creating vectors (array-based vector int[10000], @18a47e0, capacity 21870; array-based vector int[10000], @174cc1f, capacity 10000):
0.102692 sec from 0 capacity, 0.080477 sec from 10000 elements
Creating vector (array-based vector int[10000], @1050e1f, capacity 10000) from 0 via length/setInt:
0.006084 sec
Trimming the last vector: 0.000181 sec

1st vector: array-based vector int[10000], @18a47e0, capacity 21870
2nd vector: array-based vector int[10000], @174cc1f, capacity 10000
3rd vector: array-based vector int[10000], @1050e1f, capacity 10000
Sum of 1st vector: 704532704 (3.484672E7 ns, 34.85 ns/element)
Sum of 2nd vector: 704532704 (3.1404032E7 ns, 31.40 ns/element)
Sum of 3rd vector: 704532704 (3.2049152E7 ns, 32.05 ns/element)
Sum of 1st vector via array():    704532704 (3592704.0 ns, 3.59 ns/element)
Sum of 1st vector via toArray():  704532704 (3650048.0 ns, 3.65 ns/element)
Sum of 1st vector via getIntTest: 704532704 (7118336.0 ns, 7.12 ns/element)

Filling 1st vector by 0 via asIntArray (3761664.0 ns, 3.76 ns/element)
Filling 2nd vector by 0 (3.3618432E7 ns, 33.62 ns/element)
Creating 3rd vector by 0 via valueOf (1.16199168E8 ns, 116.20 ns/element)
1st vector: array-based vector int[10000], @18a47e0, capacity 10000
2nd vector: array-based vector int[10000], @174cc1f, capacity 10000
3rd vector: array-based vector int[10000], @e24e2a, capacity 10000
Sum of 1st vector: 0 (3.199232E7 ns, 31.99 ns/element)
Sum of 2nd vector: 0 (3.1866624E7 ns, 31.87 ns/element)
Sum of 3rd vector: 0 (3.174912E7 ns, 31.75 ns/element)
Sum of 1st vector via array():    0 (4141824.0 ns, 4.14 ns/element)
Sum of 1st vector via toArray():  0 (3571200.0 ns, 3.57 ns/element)
Sum of 1st vector via getIntTest: 0 (7009280.0 ns, 7.01 ns/element)

Filling 1st vector by 1 via asIntArray (3731968.0 ns, 3.73 ns/element)
Filling 2nd vector by 1 (3.2644352E7 ns, 32.64 ns/element)
Creating 3rd vector by 1 via valueOf (1.44514048E8 ns, 144.51 ns/element)
1st vector: array-based vector int[10000], @18a47e0, capacity 10000
2nd vector: array-based vector int[10000], @174cc1f, capacity 10000
3rd vector: array-based vector int[10000], @54172f, capacity 10000
Sum of 1st vector: 1000000 (3.8043904E7 ns, 38.04 ns/element)
Sum of 2nd vector: 1000000 (3.1714048E7 ns, 31.71 ns/element)
Sum of 3rd vector: 1000000 (5.0562304E7 ns, 50.56 ns/element)
Sum of 1st vector via array():    1000000 (3673344.0 ns, 3.67 ns/element)
Sum of 1st vector via toArray():  1000000 (3501056.0 ns, 3.50 ns/element)
Sum of 1st vector via getIntTest: 1000000 (8381696.0 ns, 8.38 ns/element)

Filling 1st vector by 2 via asIntArray (3601408.0 ns, 3.60 ns/element)
Filling 2nd vector by 2 (3.2235776E7 ns, 32.24 ns/element)
Creating 3rd vector by 2 via valueOf (1.44254464E8 ns, 144.25 ns/element)

Extracting sub-vectors

1st vector: array-based subvector int[5000], @18a47e0, capacity 5000, start offset = 2500
2nd vector: array-based subvector int[5000], @174cc1f, capacity 5000, start offset = 2500
3rd vector: array-based subvector int[5000], @c1b531, capacity 5000, start offset = 2500
Sum of 1st vector: 1000000 (8.8930304E7 ns, 177.86 ns/element)
Sum of 2nd vector: 1000000 (1.904256E7 ns, 38.09 ns/element)
Sum of 3rd vector: 1000000 (1.9254528E7 ns, 38.51 ns/element)
Sum of 1st vector via array():    1000000 (2063360.0 ns, 4.13 ns/element)
Sum of 1st vector via toArray():  1000000 (2000640.0 ns, 4.00 ns/element)
Sum of 1st vector via getIntTest: 1000000 (3509504.0 ns, 7.02 ns/element)

Filling 1st vector by 3 via asIntArray (2109440.0 ns, 4.22 ns/element)
Filling 2nd vector by 3 (1.7297152E7 ns, 34.59 ns/element)
Creating 3rd vector by 3 via valueOf (7.270784E7 ns, 145.42 ns/element)
1st vector: array-based subvector int[5000], @18a47e0, capacity 5000, start offset = 2500
2nd vector: array-based subvector int[5000], @174cc1f, capacity 5000, start offset = 2500
3rd vector: array-based vector int[5000], @15eb0a9, capacity 5000
Sum of 1st vector: 1500000 (1.859456E7 ns, 37.19 ns/element)
Sum of 2nd vector: 1500000 (1.8379264E7 ns, 36.76 ns/element)
Sum of 3rd vector: 1500000 (1.9867136E7 ns, 39.73 ns/element)
Sum of 1st vector via array():    1500000 (1709824.0 ns, 3.42 ns/element)
Sum of 1st vector via toArray():  1500000 (1753600.0 ns, 3.51 ns/element)
Sum of 1st vector via getIntTest: 1500000 (3398912.0 ns, 6.80 ns/element)

Filling 1st vector by 4 via asIntArray (1740544.0 ns, 3.48 ns/element)
Filling 2nd vector by 4 (1.5856128E7 ns, 31.71 ns/element)
Creating 3rd vector by 4 via valueOf (7.0744576E7 ns, 141.49 ns/element)
1st vector: array-based subvector int[5000], @18a47e0, capacity 5000, start offset = 2500
2nd vector: array-based subvector int[5000], @174cc1f, capacity 5000, start offset = 2500
3rd vector: array-based vector int[5000], @1a05308, capacity 5000
Sum of 1st vector: 2000000 (1.9034624E7 ns, 38.07 ns/element)
Sum of 2nd vector: 2000000 (1.8616064E7 ns, 37.23 ns/element)
Sum of 3rd vector: 2000000 (1.8564608E7 ns, 37.13 ns/element)
Sum of 1st vector via array():    2000000 (1849088.0 ns, 3.70 ns/element)
Sum of 1st vector via toArray():  2000000 (1811968.0 ns, 3.62 ns/element)
Sum of 1st vector via getIntTest: 2000000 (3431168.0 ns, 6.86 ns/element)

Filling 1st vector by 5 via asIntArray (1886720.0 ns, 3.77 ns/element)
Filling 2nd vector by 5 (1.5988992E7 ns, 31.98 ns/element)
Creating 3rd vector by 5 via valueOf (7.1285248E7 ns, 142.57 ns/element)

*** ITERATION #2

Creating vectors (array-based vector int[5000], @ab50cd, capacity 7290; array-based vector int[5000], @145d068, capacity 5000):
0.000403 sec from 0 capacity, 0.000328 sec from 5000 elements
Creating vector (array-based vector int[5000], @758fc9, capacity 5000) from 0 via length/setInt:
0.000674 sec
Trimming the last vector: 0.000129 sec

1st vector: array-based vector int[5000], @ab50cd, capacity 7290
2nd vector: array-based vector int[5000], @145d068, capacity 5000
3rd vector: array-based vector int[5000], @758fc9, capacity 5000
Sum of 1st vector: 1249750000 (1.9135744E7 ns, 38.27 ns/element)
Sum of 2nd vector: 1249750000 (1.8557952E7 ns, 37.12 ns/element)
Sum of 3rd vector: 1249750000 (1.8919168E7 ns, 37.84 ns/element)
Sum of 1st vector via array():    1249750000 (1846784.0 ns, 3.69 ns/element)
Sum of 1st vector via toArray():  1249750000 (1887232.0 ns, 3.77 ns/element)
Sum of 1st vector via getIntTest: 1249750000 (3454720.0 ns, 6.91 ns/element)

Filling 1st vector by 0 via asIntArray (1924608.0 ns, 3.85 ns/element)
Filling 2nd vector by 0 (2.3397376E7 ns, 46.79 ns/element)
Creating 3rd vector by 0 via valueOf (8.1252608E7 ns, 162.51 ns/element)
1st vector: array-based vector int[5000], @ab50cd, capacity 5000
2nd vector: array-based vector int[5000], @145d068, capacity 5000
3rd vector: array-based vector int[5000], @32fb4f, capacity 5000
Sum of 1st vector: 0 (1.8360576E7 ns, 36.72 ns/element)
Sum of 2nd vector: 0 (1.8688256E7 ns, 37.38 ns/element)
Sum of 3rd vector: 0 (1.915392E7 ns, 38.31 ns/element)
Sum of 1st vector via array():    0 (1843200.0 ns, 3.69 ns/element)
Sum of 1st vector via toArray():  0 (1847552.0 ns, 3.70 ns/element)
Sum of 1st vector via getIntTest: 0 (3982592.0 ns, 7.97 ns/element)

Filling 1st vector by 1 via asIntArray (1747968.0 ns, 3.50 ns/element)
Filling 2nd vector by 1 (3.707648E7 ns, 74.15 ns/element)
Creating 3rd vector by 1 via valueOf (7.2758272E7 ns, 145.52 ns/element)
1st vector: array-based vector int[5000], @ab50cd, capacity 5000
2nd vector: array-based vector int[5000], @145d068, capacity 5000
3rd vector: array-based vector int[5000], @1113708, capacity 5000
Sum of 1st vector: 500000 (1.8603008E7 ns, 37.21 ns/element)
Sum of 2nd vector: 500000 (1.8142208E7 ns, 36.28 ns/element)
Sum of 3rd vector: 500000 (1.86176E7 ns, 37.24 ns/element)
Sum of 1st vector via array():    500000 (1703168.0 ns, 3.41 ns/element)
Sum of 1st vector via toArray():  500000 (1747968.0 ns, 3.50 ns/element)
Sum of 1st vector via getIntTest: 500000 (4016640.0 ns, 8.03 ns/element)

Filling 1st vector by 2 via asIntArray (1978880.0 ns, 3.96 ns/element)
Filling 2nd vector by 2 (2.2629632E7 ns, 45.26 ns/element)
Creating 3rd vector by 2 via valueOf (7.1030528E7 ns, 142.06 ns/element)

Extracting sub-vectors

1st vector: array-based subvector int[2500], @ab50cd, capacity 2500, start offset = 1250
2nd vector: array-based subvector int[2500], @145d068, capacity 2500, start offset = 1250
3rd vector: array-based subvector int[2500], @133f1d7, capacity 2500, start offset = 1250
Sum of 1st vector: 500000 (9249536.0 ns, 37.00 ns/element)
Sum of 2nd vector: 500000 (9572352.0 ns, 38.29 ns/element)
Sum of 3rd vector: 500000 (9347840.0 ns, 37.39 ns/element)
Sum of 1st vector via array():    500000 (926208.0 ns, 3.70 ns/element)
Sum of 1st vector via toArray():  500000 (876544.0 ns, 3.51 ns/element)
Sum of 1st vector via getIntTest: 500000 (1843200.0 ns, 7.37 ns/element)

Filling 1st vector by 3 via asIntArray (892928.0 ns, 3.57 ns/element)
Filling 2nd vector by 3 (1.1321088E7 ns, 45.28 ns/element)
Creating 3rd vector by 3 via valueOf (3.6585216E7 ns, 146.34 ns/element)
1st vector: array-based subvector int[2500], @ab50cd, capacity 2500, start offset = 1250
2nd vector: array-based subvector int[2500], @145d068, capacity 2500, start offset = 1250
3rd vector: array-based vector int[2500], @14a9972, capacity 2500
Sum of 1st vector: 750000 (9215488.0 ns, 36.86 ns/element)
Sum of 2nd vector: 750000 (9575936.0 ns, 38.30 ns/element)
Sum of 3rd vector: 750000 (9410048.0 ns, 37.64 ns/element)
Sum of 1st vector via array():    750000 (866048.0 ns, 3.46 ns/element)
Sum of 1st vector via toArray():  750000 (898304.0 ns, 3.59 ns/element)
Sum of 1st vector via getIntTest: 750000 (1699328.0 ns, 6.80 ns/element)

Filling 1st vector by 4 via asIntArray (1016064.0 ns, 4.06 ns/element)
Filling 2nd vector by 4 (1.129984E7 ns, 45.20 ns/element)
Creating 3rd vector by 4 via valueOf (9256960.0 ns, 37.03 ns/element)
1st vector: array-based subvector int[2500], @ab50cd, capacity 2500, start offset = 1250
2nd vector: array-based subvector int[2500], @145d068, capacity 2500, start offset = 1250
3rd vector: array-based vector int[2500], @a01335, capacity 2500
Sum of 1st vector: 1000000 (9572608.0 ns, 38.29 ns/element)
Sum of 2nd vector: 1000000 (9215488.0 ns, 36.86 ns/element)
Sum of 3rd vector: 1000000 (9412352.0 ns, 37.65 ns/element)
Sum of 1st vector via array():    1000000 (861440.0 ns, 3.45 ns/element)
Sum of 1st vector via toArray():  1000000 (887040.0 ns, 3.55 ns/element)
Sum of 1st vector via getIntTest: 1000000 (1712640.0 ns, 6.85 ns/element)

Filling 1st vector by 5 via asIntArray (1201408.0 ns, 4.81 ns/element)
Filling 2nd vector by 5 (1.1691264E7 ns, 46.77 ns/element)
Creating 3rd vector by 5 via valueOf (3.6676864E7 ns, 146.71 ns/element)

*** ITERATION #3

Creating vectors (array-based vector int[2500], @14d3343, capacity 7290; array-based vector int[2500], @1608e05, capacity 2500):
0.000296 sec from 0 capacity, 0.000103 sec from 2500 elements
Creating vector (array-based vector int[2500], @bf32c, capacity 2500) from 0 via length/setInt:
0.000334 sec
Trimming the last vector: 0.000030 sec

1st vector: array-based vector int[2500], @14d3343, capacity 7290
2nd vector: array-based vector int[2500], @1608e05, capacity 2500
3rd vector: array-based vector int[2500], @bf32c, capacity 2500
Sum of 1st vector: 312375000 (9163264.0 ns, 36.65 ns/element)
Sum of 2nd vector: 312375000 (9303040.0 ns, 37.21 ns/element)
Sum of 3rd vector: 312375000 (9239552.0 ns, 36.96 ns/element)
Sum of 1st vector via array():    312375000 (867328.0 ns, 3.47 ns/element)
Sum of 1st vector via toArray():  312375000 (897280.0 ns, 3.59 ns/element)
Sum of 1st vector via getIntTest: 312375000 (1923840.0 ns, 7.70 ns/element)

Filling 1st vector by 0 via asIntArray (883200.0 ns, 3.53 ns/element)
Filling 2nd vector by 0 (1.1115008E7 ns, 44.46 ns/element)
Creating 3rd vector by 0 via valueOf (3.8586368E7 ns, 154.35 ns/element)
1st vector: array-based vector int[2500], @14d3343, capacity 2500
2nd vector: array-based vector int[2500], @1608e05, capacity 2500
3rd vector: array-based vector int[2500], @89fbe3, capacity 2500
Sum of 1st vector: 0 (9331712.0 ns, 37.33 ns/element)
Sum of 2nd vector: 0 (9066240.0 ns, 36.26 ns/element)
Sum of 3rd vector: 0 (9175808.0 ns, 36.70 ns/element)
Sum of 1st vector via array():    0 (926208.0 ns, 3.70 ns/element)
Sum of 1st vector via toArray():  0 (889344.0 ns, 3.56 ns/element)
Sum of 1st vector via getIntTest: 0 (1698816.0 ns, 6.80 ns/element)

Filling 1st vector by 1 via asIntArray (894720.0 ns, 3.58 ns/element)
Filling 2nd vector by 1 (1.1205632E7 ns, 44.82 ns/element)
Creating 3rd vector by 1 via valueOf (3.8655744E7 ns, 154.62 ns/element)
1st vector: array-based vector int[2500], @14d3343, capacity 2500
2nd vector: array-based vector int[2500], @1608e05, capacity 2500
3rd vector: array-based vector int[2500], @f81843, capacity 2500
Sum of 1st vector: 250000 (9249024.0 ns, 37.00 ns/element)
Sum of 2nd vector: 250000 (9375744.0 ns, 37.50 ns/element)
Sum of 3rd vector: 250000 (9382912.0 ns, 37.53 ns/element)
Sum of 1st vector via array():    250000 (873984.0 ns, 3.50 ns/element)
Sum of 1st vector via toArray():  250000 (886528.0 ns, 3.55 ns/element)
Sum of 1st vector via getIntTest: 250000 (1815552.0 ns, 7.26 ns/element)

Filling 1st vector by 2 via asIntArray (1069056.0 ns, 4.28 ns/element)
Filling 2nd vector by 2 (1.1239936E7 ns, 44.96 ns/element)
Creating 3rd vector by 2 via valueOf (1.6431872E7 ns, 65.73 ns/element)

Extracting sub-vectors

1st vector: array-based subvector int[1250], @14d3343, capacity 1250, start offset = 625
2nd vector: array-based subvector int[1250], @1608e05, capacity 1250, start offset = 625
3rd vector: array-based subvector int[1250], @dd5b, capacity 1250, start offset = 625
Sum of 1st vector: 250000 (4785664.0 ns, 38.29 ns/element)
Sum of 2nd vector: 250000 (4479488.0 ns, 35.84 ns/element)
Sum of 3rd vector: 250000 (4511744.0 ns, 36.09 ns/element)
Sum of 1st vector via array():    250000 (496128.0 ns, 3.97 ns/element)
Sum of 1st vector via toArray():  250000 (445184.0 ns, 3.56 ns/element)
Sum of 1st vector via getIntTest: 250000 (1141504.0 ns, 9.13 ns/element)

Filling 1st vector by 3 via asIntArray (496640.0 ns, 3.97 ns/element)
Filling 2nd vector by 3 (5495296.0 ns, 43.96 ns/element)
Creating 3rd vector by 3 via valueOf (3.2905216E7 ns, 263.24 ns/element)
1st vector: array-based subvector int[1250], @14d3343, capacity 1250, start offset = 625
2nd vector: array-based subvector int[1250], @1608e05, capacity 1250, start offset = 625
3rd vector: array-based vector int[1250], @c4bcdc, capacity 1250
Sum of 1st vector: 375000 (4609792.0 ns, 36.88 ns/element)
Sum of 2nd vector: 375000 (4964096.0 ns, 39.71 ns/element)
Sum of 3rd vector: 375000 (4601088.0 ns, 36.81 ns/element)
Sum of 1st vector via array():    375000 (443904.0 ns, 3.55 ns/element)
Sum of 1st vector via toArray():  375000 (455168.0 ns, 3.64 ns/element)
Sum of 1st vector via getIntTest: 375000 (854784.0 ns, 6.84 ns/element)

Filling 1st vector by 4 via asIntArray (469248.0 ns, 3.75 ns/element)
Filling 2nd vector by 4 (5595136.0 ns, 44.76 ns/element)
Creating 3rd vector by 4 via valueOf (1.176704E7 ns, 94.14 ns/element)
1st vector: array-based subvector int[1250], @14d3343, capacity 1250, start offset = 625
2nd vector: array-based subvector int[1250], @1608e05, capacity 1250, start offset = 625
3rd vector: array-based vector int[1250], @4b4333, capacity 1250
Sum of 1st vector: 500000 (4765696.0 ns, 38.13 ns/element)
Sum of 2nd vector: 500000 (4651264.0 ns, 37.21 ns/element)
Sum of 3rd vector: 500000 (4509184.0 ns, 36.07 ns/element)
Sum of 1st vector via array():    500000 (446464.0 ns, 3.57 ns/element)
Sum of 1st vector via toArray():  500000 (455168.0 ns, 3.64 ns/element)
Sum of 1st vector via getIntTest: 500000 (985856.0 ns, 7.89 ns/element)

Filling 1st vector by 5 via asIntArray (464128.0 ns, 3.71 ns/element)
Filling 2nd vector by 5 (5582336.0 ns, 44.66 ns/element)
Creating 3rd vector by 5 via valueOf (1575168.0 ns, 12.60 ns/element)

